using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using _2.DataTransferObject;
using _4.Utils;

namespace _1.DataAccessLayer.Evaluate_Order
{
    public class Evaluate_OrderDal : DbInteractionBase, IEvaluate_OrderDal
    {
        #region BACKEND
        public Tuple<int, List<Evaluate_OrderList>, int> SelectPaging(Evaluate_OrderSearchDto obj, int pageIndex, int pageSize)
        {
            return ExecuteReaderPagingOutput<Evaluate_OrderList>("sp_Evaluate_OrderSelectPaging", new List<QueryParam>
            {
                new QueryParam {NameParam = "ToDate", ValueParam = obj.ToDate},
                new QueryParam {NameParam = "FromDate", ValueParam = obj.FromDate},
                new QueryParam {NameParam = "Keyword", ValueParam = obj.Keyword},
                new QueryParam {NameParam = "CargoTypeId", ValueParam = obj.CargoTypeId},
                new QueryParam {NameParam = "Status", ValueParam = obj.Status},
                new QueryParam {NameParam = "PageIndex", ValueParam = pageIndex},
                new QueryParam {NameParam = "PageSize", ValueParam = pageSize},
                new QueryParam {NameParam = "order", ValueParam = obj.Order},
                new QueryParam {NameParam = "orderdir", ValueParam = obj.Orderdir},
                new QueryParam {NameParam = "RecordCount", IsOutParam = true},
                new QueryParam {NameParam = "role", ValueParam =  obj.role},
                new QueryParam {NameParam = "UserId", ValueParam = obj.UserId},
                new QueryParam {NameParam = "CategoryId", ValueParam = obj.CategoryId},
                new QueryParam {NameParam = "IsIncompetent", IsOutParam = true}
            });
        }

        public int IsLock(Evaluate_OrderLock obj)
        {
            DataTable arrayId = new DataTable();
            arrayId.Columns.Add("id", typeof(int));

            foreach (var item in ConvertUtil.GetValuesArray(obj.arrayId))
            {
                arrayId.Rows.Add(item);
            }
            return ExecuteNonQueryOutput("sp_Evaluate_OrderIsLock", new List<QueryParam>
            {
                new QueryParam {NameParam ="IsLock",ValueParam = obj.IsLock},
                new QueryParam {NameParam ="ArrayId",ValueParam = arrayId},
                new QueryParam {NameParam ="role",ValueParam = obj.role},
                new QueryParam {NameParam ="CategoryId",ValueParam = obj.CategoryId},
                new QueryParam {NameParam ="UserId",ValueParam = obj.UserId},
                new QueryParam {NameParam = "IsIncompetent", IsOutParam = true}
            });
        }

        public int Delete(Evaluate_OrderDeleted objDeleted)
        {
            DataTable arrayId = new DataTable();
            arrayId.Columns.Add("id", typeof(int));

            foreach (var item in ConvertUtil.GetValuesArray(objDeleted.ArrayId))
            {
                arrayId.Rows.Add(item);
            }
            return ExecuteNonQueryOutput("sp_Evaluate_OrderDelete", new List<QueryParam>
            {
                new QueryParam {NameParam ="ArrayId",ValueParam = arrayId},
                 new QueryParam {NameParam ="role",ValueParam = objDeleted.role},
                new QueryParam {NameParam ="CategoryId",ValueParam = objDeleted.CategoryId},
                new QueryParam {NameParam ="UserId",ValueParam = objDeleted.UserId},
                new QueryParam {NameParam = "IsIncompetent", IsOutParam = true}
            });
        }

        public Tuple<Evaluate_OrderAdd, int> GetById(Evaluate_OrderGetbyId objGetbyId)
        {
            return ExecuteReaderObjectOutput<Evaluate_OrderAdd>("sp_Evaluate_OrderSelectById", new List<QueryParam>
            {
                new QueryParam {NameParam ="id",ValueParam = objGetbyId.id},
                new QueryParam {NameParam ="role",ValueParam = objGetbyId.role},
                new QueryParam {NameParam ="CategoryId",ValueParam = objGetbyId.CategoryId},
                new QueryParam {NameParam ="UserId",ValueParam = objGetbyId.UserId},
                new QueryParam {NameParam = "IsIncompetent", IsOutParam = true}
            });
        }

        public int Insert(Evaluate_OrderAdd objAdd)
        {
            return ExecuteNonQueryOutput("sp_Evaluate_OrderInsertOrUpdate", new List<QueryParam>
            {
                new QueryParam {NameParam = "id", ValueParam = objAdd.id},
                new QueryParam {NameParam = "Comment", ValueParam = objAdd.Comment},
                new QueryParam {NameParam = "idOrder", ValueParam = objAdd.idOrder},
                new QueryParam {NameParam = "Point", ValueParam = objAdd.Point},
                new QueryParam {NameParam = "customer_tel", ValueParam = objAdd.customer_tel},
                new QueryParam {NameParam = "customer_email", ValueParam = objAdd.customer_email},
                new QueryParam {NameParam = "customer_name", ValueParam = objAdd.customer_name},
                new QueryParam {NameParam = "CargoTypeId", ValueParam = objAdd.CargoTypeId},
                new QueryParam {NameParam = "role", ValueParam = objAdd.role},
                new QueryParam {NameParam = "UserId", ValueParam = objAdd.UserId},
                new QueryParam {NameParam = "CategoryId", ValueParam = objAdd.CategoryId},
                new QueryParam {NameParam = "IsIncompetent", IsOutParam = true}
            });
        }

        #endregion
        #region FONTEND
        public List<Valuate_OrderGetList> FeGetValuateOrderList(int id)
        {
            return ExecuteReader<Valuate_OrderGetList>("fe_Evalute_Order_GetAll", new List<QueryParam>
            {
                new QueryParam {NameParam = "productid", ValueParam = id}
            });
        }
        public List<Valuate_OrderUserList> FeGetValuateUserList(int id)
        {
            return ExecuteReader<Valuate_OrderUserList>("fe_Evaluate_Order_User", new List<QueryParam>
            {
                new QueryParam {NameParam = "memberid", ValueParam = id}
            });
        }
        public Tuple<int, List<Valuate_OrderGetList>> SelectDataPaging(ValuatePadingDto obj, int pageIndex, int pageSize)
        {
            return ExecuteReaderPaging<Valuate_OrderGetList>("fe_Evalute_Order_GetAll", new List<QueryParam>
            {
                new QueryParam {NameParam = "productid", ValueParam = obj.productid},
                new QueryParam {NameParam = "PageIndex", ValueParam = pageIndex},
                new QueryParam {NameParam = "PageSize", ValueParam = pageSize},
                new QueryParam {NameParam = "RecordCount", IsOutParam = true}
            });
        }
        #endregion
    }
}