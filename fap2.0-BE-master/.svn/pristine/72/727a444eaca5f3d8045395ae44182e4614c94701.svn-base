using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using _2.DataTransferObject;
using _4.Utils;

namespace _1.DataAccessLayer.Images
{
    public class ImagesDal : DbInteractionBase, IImagesDal
    {
        #region BACKEND
        public Tuple<int, List<ImagesList>> SelectPaging(ImagesSearchDto obj, int pageIndex, int pageSize)
        {
            return ExecuteReaderPaging<ImagesList>("sp_ImagesSelectPaging", new List<QueryParam>
            {
                new QueryParam {NameParam = "userid", ValueParam = obj.userid},
                new QueryParam {NameParam = "PageIndex", ValueParam = pageIndex},
                new QueryParam {NameParam = "PageSize", ValueParam = pageSize},
                new QueryParam {NameParam = "order", ValueParam = obj.Order},
                new QueryParam {NameParam = "orderdir", ValueParam = obj.Orderdir},
                new QueryParam {NameParam = "RecordCount", IsOutParam = true},
            });
        }

        public int IsLock(ImagesLock obj)
        {
            DataTable arrayId = new DataTable();
            arrayId.Columns.Add("id", typeof(int));

            foreach (var item in ConvertUtil.GetValuesArray(obj.arrayId))
            {
                arrayId.Rows.Add(item);
            }
            return ExecuteNonQueryOutput("sp_ImagesIsLock", new List<QueryParam>
            {
                new QueryParam {NameParam ="islock",ValueParam = obj.islock},
                new QueryParam {NameParam ="ArrayId",ValueParam = arrayId},
                new QueryParam {NameParam ="role",ValueParam = obj.role},
                new QueryParam {NameParam ="CategoryId",ValueParam = obj.CategoryId},
                new QueryParam {NameParam ="UserId",ValueParam = obj.UserId},
                new QueryParam {NameParam = "IsIncompetent", IsOutParam = true}
            });
        }

        public int Delete(ImagesDeleted objDeleted)
        {
            DataTable arrayId = new DataTable();
            arrayId.Columns.Add("id", typeof(int));

            foreach (var item in ConvertUtil.GetValuesArray(objDeleted.ArrayId))
            {
                arrayId.Rows.Add(item);
            }
            return ExecuteNonQueryOutput("sp_ImagesDelete", new List<QueryParam>
            {
                new QueryParam {NameParam ="ArrayId",ValueParam = arrayId},
                 new QueryParam {NameParam ="role",ValueParam = objDeleted.role},
                new QueryParam {NameParam ="CategoryId",ValueParam = objDeleted.CategoryId},
                new QueryParam {NameParam ="UserId",ValueParam = objDeleted.UserId},
                new QueryParam {NameParam = "IsIncompetent", IsOutParam = true}
            });
        }

        public Tuple<ImagesAdd, int> GetById(ImagesGetbyId objGetbyId)
        {
            return ExecuteReaderObjectOutput<ImagesAdd>("sp_ImagesSelectById", new List<QueryParam>
            {
                new QueryParam {NameParam ="id",ValueParam = objGetbyId.id},
                new QueryParam {NameParam ="role",ValueParam = objGetbyId.role},
                new QueryParam {NameParam ="CategoryId",ValueParam = objGetbyId.CategoryId},
                new QueryParam {NameParam ="UserId",ValueParam = objGetbyId.UserId},
                new QueryParam {NameParam = "IsIncompetent", IsOutParam = true}
            });
        }

        public bool Insert(ImagesAdd objAdd)
        {
            return ExecuteNonQuery("sp_ImagesInsertOrUpdate", new List<QueryParam>
            {
                new QueryParam {NameParam = "id", ValueParam = objAdd.id},
                new QueryParam {NameParam = "title", ValueParam = objAdd.title},
                new QueryParam {NameParam = "userid", ValueParam = objAdd.userid}
            });
        }

        #endregion

    }
}