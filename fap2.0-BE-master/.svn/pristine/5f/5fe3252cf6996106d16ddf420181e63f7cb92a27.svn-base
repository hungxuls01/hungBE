using _1.DataAccessLayer.Company;
using _1.DataAccessLayer.Member;
using _1.DataAccessLayer.Sale_OrderHistory;
using _1.DataAccessLayer.Sale_Orders;
using _2.DataTransferObject;
using _4.Utils;
using ApiTng.apiconnect;
using ApiTng.ApiExpress;
using ApiTng.Models;
using Microsoft.AspNet.Identity.Owin;
using Newtonsoft.Json;
using NLog;
using Nuclex.Cloning;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Security.Claims;
using System.Security.Cryptography;
using System.Text;
using System.Web.Http;
using System.Web.Http.Cors;
using System.Web.Script.Serialization;

namespace ApiTng.Controllers
{
    [EnableCors(origins: "*", headers: "*", methods: "*")]
    public class Sale_OrdersController : ApiController
    {
        private static ICompanyDal _CompanyDal;
        private static ISale_OrderHistoryDal _Sale_OrderHistoryDal;
        private static IMemberDal _MemberDal;
        private static ISale_OrdersDal _saleOrdersDal;
        private static Logger _logger;
        private readonly LalamoveService _lalamoveService;
        private VIETTELService api;
        private Api apiconnect;
        private string tokenkey = "SDYTLSOFT@1234554321";
        public Sale_OrdersController()
        {
            api = new VIETTELService();
            _CompanyDal = new CompanyDal();
            _MemberDal = new MemberDal();
            _saleOrdersDal = new Sale_OrdersDal();
            _logger = LogManager.GetCurrentClassLogger();
            _lalamoveService = new LalamoveService();
            _Sale_OrderHistoryDal = new Sale_OrderHistoryDal();
            apiconnect = new Api();
        }

        #region BACKEND
        [HttpPost]
        public ResponeResult GetPaging(Sale_OrdersSearchDto obj)
        {
            var response = new ResponeResult(ConstUtil.Error, "Có lỗi xảy ra!", null);
            try
            {
                var result = _saleOrdersDal.SelectPaging(obj, obj.PageIndex, obj.PageSize);
                var data = new DataTableBase<Sale_OrdersList>(result.Item2, result.Item1, obj.PageIndex + 1).Init();
                if (data != null)
                {
                    response.Status = ConstUtil.Success;
                    response.Message = "Thành công !";
                    response.Data = data;
                    return response;
                }
                response.Status = ConstUtil.Error;
                response.Message = "Có lỗi sảy ra !";
                return response;

            }
            catch (Exception ex)
            {
                _logger.Error(ex.Message);
                response.Status = ConstUtil.Error;
                response.Message = "Có lỗi sảy ra !";
                return response;
            }
        }


        [HttpPost]
        public ResponeResult GetPagingByMemberId(Sale_OrdersSearchByMemberIdDto obj)
        {
            var response = new ResponeResult(ConstUtil.Error, "Có lỗi xảy ra!", null);
            try
            {
                var result = _saleOrdersDal.SelectPagingByMemberId(obj, obj.PageIndex, obj.PageSize);
                var data = new DataTableBase<Sale_OrdersList>(result.Item2, result.Item1, obj.PageIndex + 1).Init();
                if (data != null)
                {
                    response.Status = ConstUtil.Success;
                    response.Message = "Thành công !";
                    response.Data = data;
                    return response;
                }
                response.Status = ConstUtil.Error;
                response.Message = "Có lỗi sảy ra !";
                return response;

            }
            catch (Exception ex)
            {
                _logger.Error(ex.Message);
                response.Status = ConstUtil.Error;
                response.Message = "Có lỗi sảy ra !";
                return response;
            }
        }

        [Authorize(Roles = "FE1B570B-22F1-42E8-847E-A177B931BC57,918C3FCB-F6C4-47B5-AA23-6CD788B010C5")]
        [HttpPost]
        public ResponeResult GetById(Sale_OrdersGetbyId obj)
        {
            var response = new ResponeResult(ConstUtil.Error, "Có lỗi xảy ra!", null);
            try
            {
                var data = _saleOrdersDal.GetById(obj);
                if (data != null)
                {
                    response.Status = ConstUtil.Success;
                    response.Message = "Thành công !";
                    response.Data = data;
                    return response;
                }
                response.Status = ConstUtil.Error;
                response.Message = "Không tìm thấy dữ liệu!";
                return response;
            }
            catch (Exception ex)
            {
                _logger.Error(ex.Message);
                response.Status = ConstUtil.Error;
                response.Message = "Có lỗi sảy ra !";
                return response;
            }
        }


        [Authorize(Roles = "FE1B570B-22F1-42E8-847E-A177B931BC57,918C3FCB-F6C4-47B5-AA23-6CD788B010C5")]
        [HttpPost]
        public ResponeResult Insert(Sale_OrdersAdd objAdd)
        {
            var response = new ResponeResult(ConstUtil.Error, "Có lỗi xảy ra!", null);
            try
            {
                var identity = (ClaimsIdentity)User.Identity;
                string isadmin = identity.Claims.Where(c => c.Type == "isadmin").Select(c => c.Value).SingleOrDefault();
                //System.Net.Http.Headers.HttpRequestHeaders headers = this.Request.Headers;
                //var data1 = JsonConvert.SerializeObject(objAdd);
                //var tokenserver = HmacshaUtil.CreateToken("POST", "api/Sale_Orders/Insert", data1);
                //string tokencheck = string.Empty;
                //if (headers.Contains("token"))
                //{
                //    tokencheck = headers.GetValues("token").First();
                //}
                //if (tokencheck != tokenserver)
                //{
                //    response.Status = ConstUtil.Error;
                //    response.Message = "Sai token";
                //    return response;
                //}
                if (objAdd.member_birthday == null)
                {
                    objAdd.member_birthday = "";
                }
                if (objAdd.memberid == null)
                {
                    var ckeckmobile = _MemberDal.CheckEmailAndMobile(objAdd.member_tel);
                    if (ckeckmobile != null)
                    {
                        response.Status = ConstUtil.Error;
                        response.Message = "Số điện thoại đã tồn tại !";
                        return response;
                    }
                    var ckeckemail = _MemberDal.CheckEmailAndMobile(objAdd.member_email);
                    if (ckeckemail != null)
                    {
                        response.Status = ConstUtil.Error;
                        response.Message = "Email đã tồn tại !";
                        return response;
                    }
                    var memberadd = new MemberAdd();
                    memberadd.code = objAdd.membercode;
                    memberadd.name = objAdd.member_fullname;
                    if (objAdd.member_sex == 0)
                    {
                        memberadd.sex = false;
                    }
                    else
                    {
                        memberadd.sex = true;
                    }
                    memberadd.birthday = objAdd.member_birthday;
                    memberadd.mobile = objAdd.member_tel;
                    memberadd.email = objAdd.member_email;
                    memberadd.address = objAdd.member_address;
                    memberadd.provinceid = objAdd.member_provinceid;
                    memberadd.zalo = "";
                    memberadd.facebook = "";
                    memberadd.ispersonal = false;
                    memberadd.purpose = "";
                    memberadd.field = "";
                    memberadd.nameproducer = "";
                    memberadd.mobileproducer = "";
                    memberadd.emailproducer = "";
                    memberadd.productproducer = "";
                    memberadd.productbuyproducer = "";
                    memberadd.addressproducer = "";
                    memberadd.isshowproducer = false;
                    memberadd.issellproducer = false;
                    memberadd.namedistributor = "";
                    memberadd.mobiledistributor = "";
                    memberadd.emaildistributor = "";
                    memberadd.productdistributor = "";
                    memberadd.productbuydistributor = "";
                    memberadd.addressdistributor = "";
                    memberadd.isshowdistributor = false;
                    memberadd.isselldistributor = false;
                    memberadd.namePCT = "";
                    memberadd.mobilePCT = "";
                    memberadd.emailPCT = "";
                    memberadd.productPCT = "";
                    memberadd.productbuyPCT = "";
                    memberadd.addressPCT = "";
                    memberadd.isshowPCT = false;
                    memberadd.issellPCT = false;
                    memberadd.note = "";
                    memberadd.productcatelogyPCT = "";
                    memberadd.mstproducer = "";
                    memberadd.mstdistributor = "";
                    memberadd.mstPCT = "";
                    memberadd.KeyLock = ConvertUtil.RandomString(20, false);
                    memberadd.RegEmail = ConvertUtil.RandomString(8, false);
                    var password = ConvertUtil.MD5Hash(objAdd.password);
                    memberadd.password = memberadd.KeyLock.Trim() + memberadd.RegEmail.Trim() + password.Trim();
                    memberadd.tokenActive = ConvertUtil.MD5Hash(memberadd.KeyLock.Trim() + memberadd.RegEmail.Trim()) + ConvertUtil.MD5Hash(memberadd.KeyLock.Trim()) + ConvertUtil.MD5Hash(memberadd.RegEmail.Trim());
                    memberadd.memberUselist = new List<Member_UseList>();
                    var datamember = _MemberDal.Insert(memberadd);
                    if (datamember == null && datamember == "")
                    {
                        response.Status = ConstUtil.Error;
                        response.Message = "Có lỗi sảy ra !";
                        return response;
                    }
                    var getidokenNoti = new MemberUpdatetokenNoti();
                    getidokenNoti.id = new Guid(datamember);
                    getidokenNoti.tokenNoti = ConvertUtil.MD5Hash(datamember + tokenkey) + ConvertUtil.MD5Hash(datamember) + ConvertUtil.MD5Hash(tokenkey);
                    var tokenNoti = _MemberDal.UpdatetokenNoti(getidokenNoti);
                    if (!tokenNoti)
                    {
                        response.Status = ConstUtil.Error;
                        response.Message = "Có lỗi sảy ra !";
                        return response;
                    }
                    memberadd.id = new Guid(datamember);
                    var memberFE = apiconnect.InsertMember(memberadd);
                    if (memberFE.Result.Status == ConstUtil.Error)
                    {
                        response.Status = ConstUtil.Error;
                        response.Message = "Có lỗi sảy ra !";
                        return response;
                    }
                    var UpdatetokenNotiMember = apiconnect.UpdatetokenNotiMember(getidokenNoti);
                    if (UpdatetokenNotiMember.Result.Status == ConstUtil.Error)
                    {
                        response.Status = ConstUtil.Error;
                        response.Message = "Có lỗi sảy ra !";
                        return response;
                    }
                    objAdd.memberid = new Guid(datamember);
                }

                var listidsale = "";
                // tạo đơn kí gửi
                var Use = objAdd.saleorderUse;
                var productConsignment = objAdd.saleorderline.Where(x => x.isConsignment == 1).ToList();
                var getkho = new ListProduct_StoreGetKHO();
                var getkholist = new List<Product_StoreGetKHO>();
                foreach (var item in productConsignment)
                {
                    var getkhodetail = new Product_StoreGetKHO();
                    getkhodetail.id = (Guid)item.productid;
                    getkhodetail.khohang = (int)item.qty;
                    getkholist.Add(getkhodetail);
                }
                getkho.productid = getkholist;
                var kho = apiconnect.GetKHO(getkho);
                if (kho == null)
                {
                    response.Status = ConstUtil.Error;
                    response.Message = "Có lỗi sảy ra !";
                    return response;
                }
                var stores = kho.Result.GroupBy(x => new { x.storeid }, (k, g) => new { id = k.storeid }).ToList();

                foreach (var item in stores)
                {
                    var storegetid = kho.Result.Where(x => x.storeid == item.id).FirstOrDefault();
                    var UseInSale = new List<Saleorderuse>();
                    var productin = kho.Result.Where(x => x.storeid == item.id).GroupBy(x => new { x.id }, (k, g) => new { id = k.id }).ToList();
                    var myInClause = new List<Guid>();
                    foreach (var item1 in productin)
                    {
                        myInClause.Add(item1.id);
                    }
                    var productInStores = stores.Count > 1 ? productConsignment.Where(v => myInClause.Contains((Guid)v.productid)).ToList() : productConsignment;
                    var Total = Convert.ToInt32(productInStores.Sum(x => x.total));
                    var WEIGHT = Convert.ToInt32(productInStores.Sum(x => x.Weight));
                    var qty = Convert.ToInt32(productInStores.Sum(x => x.qty));
                    var nameproduct = "";
                    var transferscode = "";
                    foreach (var itempro in productInStores)
                    {
                        nameproduct = nameproduct + itempro.title + ";";
                    }

                    if (Use != null)
                    {
                        foreach (var itemUse in Use)
                        {
                            var productidUse = itemUse.productid;
                            var list = productidUse.Split(',');
                            foreach (var itemList in list)
                            {
                                if (itemList != null && itemList != "")
                                {
                                    var idproductUse = new Guid(itemList);
                                    var count = productInStores.Where(x => x.productid == idproductUse).Count();
                                    if (count > 0)
                                    {
                                        UseInSale.Add(itemUse);
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    var sale = new Sale_OrdersAdd();
                    sale = ReflectionCloner.DeepFieldClone<Sale_OrdersAdd>(objAdd);
                   
                    sale.CompanyId = null;
                    if (objAdd.PaymentType == 1)
                    {
                        sale.status = 6;
                    }
                    else
                    {
                        sale.status = 1;
                    }
                    sale.storeid = storegetid.id;
                    sale.receiver_address = storegetid.address;
                    sale.receiver_provinceid = storegetid.provinceid;
                    sale.receiver_rewardid = storegetid.wardid;
                    sale.receiver_districtid = storegetid.districtid;
                    sale.receiver_fullname = storegetid.employeename;
                    sale.receiver_tel = storegetid.employeemobile;
                    sale.receiver_email = "";
                    sale.member_sex = 1;
                    var getprice = new PriceAllApiViettelPostModel();
                    getprice.SENDER_PROVINCE = (int)sale.receiver_provinceid;
                    getprice.SENDER_DISTRICT = (int)sale.receiver_districtid;
                    getprice.RECEIVER_PROVINCE = (int)sale.member_provinceid;
                    getprice.RECEIVER_DISTRICT = (int)sale.member_districtid;
                    getprice.PRODUCT_WEIGHT = WEIGHT;
                    getprice.PRODUCT_PRICE = Total;
                    getprice.TYPE = 1;
                    getprice.PRODUCT_TYPE = "HH";
                    getprice.MONEY_COLLECTION = Total;
                    var datapvc = api.getallpvc(getprice);
                    var datafor = datapvc.Result.ToList();
                    if (objAdd.typeTransport == 0) // Giao hàng tiêu chuẩn
                    {
                        if (sale.member_provinceid == sale.receiver_provinceid)
                        {
                            foreach (var item1 in datafor)
                            {
                                if (item1.MA_DV_CHINH == "PHS")
                                {
                                    sale.cpvc = item1.GIA_CUOC;
                                    var lines = item1.THOI_GIAN.Split(' ');
                                    var date = DateTime.Now.AddHours(Convert.ToInt32(lines[0]));
                                    sale.deliverydate = ConvertDate(date);
                                    transferscode = "PHS";
                                }
                            }
                        }
                        else
                        {
                            foreach (var item2 in datafor)
                            {
                                if (item2.MA_DV_CHINH == "VTK")
                                {
                                    sale.cpvc = item2.GIA_CUOC;
                                    var lines = item2.THOI_GIAN.Split(' ');
                                    var date = DateTime.Now.AddHours(Convert.ToInt32(lines[0]));
                                    sale.deliverydate = ConvertDate(date);
                                    transferscode = "VTK";
                                }
                            }
                        }
                    }
                    if (objAdd.typeTransport == 1) // Giao hàng nhanh
                    {
                        if (sale.member_provinceid == sale.receiver_provinceid)
                        {
                            foreach (var item1 in datafor)
                            {
                                if (item1.MA_DV_CHINH == "VCN")
                                {
                                    sale.cpvc = item1.GIA_CUOC;
                                    var lines = item1.THOI_GIAN.Split(' ');
                                    var date = DateTime.Now.AddHours(Convert.ToInt32(lines[0]));
                                    sale.deliverydate = date.Year.ToString() + date.Month.ToString() + date.Day.ToString() + date.Hour.ToString() + date.Minute.ToString() + date.Second.ToString();
                                    transferscode = "VCN";
                                }
                            }
                        }
                        else
                        {
                            foreach (var item2 in datafor)
                            {
                                if (item2.MA_DV_CHINH == "VBS")
                                {
                                    sale.cpvc = item2.GIA_CUOC;
                                    var lines = item2.THOI_GIAN.Split(' ');
                                    var date = DateTime.Now.AddHours(Convert.ToInt32(lines[0]));
                                    sale.deliverydate = ConvertDate(date);
                                    transferscode = "VBS";
                                }
                            }
                        }
                    }

                    sale.money_total = Total;
                    sale.id = null;
                    sale.saleorderline = productInStores;
                    sale.saleorderUse = UseInSale;
                    sale.transferscode = transferscode;
                    var data = _saleOrdersDal.Insert(sale);
                    if (data == null && data == "")
                    {
                        response.Status = ConstUtil.Error;
                        response.Message = "Có lỗi sảy ra !";
                        return response;
                    }
                    listidsale = data + ",";
                    var historycxn = new Sale_OrderHistoryAdd();
                    historycxn.sale_orderid = new Guid(data);
                    historycxn.status = 0;
                    var historydata = _Sale_OrderHistoryDal.Insert(historycxn);
                    if (!historydata)
                    {
                        response.Status = ConstUtil.Error;
                        response.Message = "Có lỗi sảy ra !";
                        return response;
                    }
                    var historyclh = new Sale_OrderHistoryAdd();
                    historyclh.sale_orderid = new Guid(data);
                    historyclh.status = 1;
                    var historydataclh = _Sale_OrderHistoryDal.Insert(historyclh);
                    if (!historydataclh)
                    {
                        response.Status = ConstUtil.Error;
                        response.Message = "Có lỗi sảy ra !";
                        return response;
                    }
                    var datagetid = GetbyIdFE(data);
                    var insertFE = apiconnect.InsertSale_Orders(datagetid);
                    if (insertFE.Result.Status != ConstUtil.Success)
                    {
                        response.Status = ConstUtil.Error;
                        response.Message = "Có lỗi sảy ra !";
                        return response;
                    }
                   
                  

                    var express = new ViettelpostCreate();
                    express.ORDER_NUMBER = data;
                    express.GROUPADDRESS_ID = 7367688;
                    express.CUS_ID = 7925014;
                    express.DELIVERY_DATE = "";
                    express.SENDER_FULLNAME = storegetid.employeename;
                    express.SENDER_ADDRESS = storegetid.address;
                    express.SENDER_PHONE = storegetid.employeemobile;
                    express.SENDER_EMAIL = "";
                    express.SENDER_WARD = storegetid.wardid;
                    express.SENDER_DISTRICT = storegetid.districtid;
                    express.SENDER_PROVINCE = storegetid.provinceid;
                    express.SENDER_LATITUDE = 0;
                    express.SENDER_LONGITUDE = 0;
                    express.RECEIVER_FULLNAME = objAdd.member_fullname;
                    express.RECEIVER_ADDRESS = objAdd.member_address;
                    express.RECEIVER_PHONE = objAdd.member_tel;
                    express.RECEIVER_EMAIL = objAdd.member_email;
                    express.RECEIVER_WARD = (int)objAdd.member_rewardid;
                    express.RECEIVER_DISTRICT = (int)objAdd.member_districtid;
                    express.RECEIVER_PROVINCE = (int)objAdd.member_provinceid;
                    express.RECEIVER_LATITUDE = 0;
                    express.RECEIVER_LONGITUDE = 0;
                    express.PRODUCT_NAME = nameproduct;
                    express.PRODUCT_DESCRIPTION = "";
                    express.PRODUCT_QUANTITY = qty;
                    express.PRODUCT_PRICE = Total;
                    express.PRODUCT_WEIGHT = WEIGHT;
                    express.PRODUCT_LENGTH = 0;
                    express.PRODUCT_WIDTH = 0;
                    express.PRODUCT_HEIGHT = 0;
                    express.PRODUCT_TYPE = "HH";
                    express.ORDER_PAYMENT = 2; // thu hộ tiền cước và tiền hàng
                    express.ORDER_SERVICE = transferscode;
                    express.ORDER_SERVICE_ADD = "";
                    express.ORDER_VOUCHER = "";
                    express.ORDER_NOTE = sale.note;

                    express.MONEY_COLLECTION = Total;
                    express.MONEY_TOTALFEE = 0;
                    express.MONEY_FEECOD = 0;
                    express.MONEY_FEEVAS = 0;
                    express.MONEY_FEEINSURRANCE = 0;
                    express.MONEY_FEE = 0;
                    express.MONEY_FEEOTHER = 0;
                    express.MONEY_TOTALVAT = 0;
                    express.MONEY_TOTAL = 0;
                    var dataexpress = api.createorder(express);
                    if (dataexpress.Result.status != 200)
                    {
                        response.Status = ConstUtil.Error;
                        response.Message = "Có lỗi sảy ra !";
                        return response;
                    }
                    else
                    {
                        var expresupdate = new Sale_OrderUpdateExpress();
                        expresupdate.id = new Guid(data);
                        expresupdate.transfersid = dataexpress.Result.data.ORDER_NUMBER;
                        expresupdate.transferscode = transferscode;
                        expresupdate.transfersmoney = dataexpress.Result.data.MONEY_TOTAL;
                        _saleOrdersDal.UpdateExpress(expresupdate);
                        var update = apiconnect.Sale_OrdersUpdateExpress(expresupdate);
                        if (update == null)
                        {
                            response.Status = ConstUtil.Error;
                            response.Message = "Có lỗi sảy ra !";
                            return response;
                        }

                        var sale_OrderAddKHO = new WS_Sale_OrderAddKHO();
                        sale_OrderAddKHO.sale_Orderidnew = new Guid(data);
                        sale_OrderAddKHO.status = 0;
                        sale_OrderAddKHO.money_total = datagetid.money_total;
                        sale_OrderAddKHO.discount = datagetid.discount;
                        sale_OrderAddKHO.cod = datagetid.cod;
                        sale_OrderAddKHO.cpvc = datagetid.cpvc;
                        sale_OrderAddKHO.memberid = datagetid.memberid;
                        sale_OrderAddKHO.note = datagetid.note;
                        if (datagetid.IsPayment == 0)
                        {
                            sale_OrderAddKHO.IsPayment = false;
                        }
                        else
                        {
                            sale_OrderAddKHO.IsPayment = true;
                        }
                        sale_OrderAddKHO.PaymentType = datagetid.PaymentType;
                        sale_OrderAddKHO.member_fullname = datagetid.member_fullname;
                        sale_OrderAddKHO.member_tel = datagetid.member_tel;
                        sale_OrderAddKHO.member_address = datagetid.member_address;
                        sale_OrderAddKHO.member_email = datagetid.member_email;
                        sale_OrderAddKHO.member_birthday = datagetid.member_birthday;
                        if (datagetid.member_sex == 0)
                        {
                            sale_OrderAddKHO.member_sex = false;
                        }
                        else
                        {
                            sale_OrderAddKHO.member_sex = true;
                        }
                        sale_OrderAddKHO.member_rewardid = datagetid.member_rewardid;
                        sale_OrderAddKHO.member_districtid = datagetid.member_districtid;
                        sale_OrderAddKHO.member_provinceid = datagetid.member_provinceid;
                        sale_OrderAddKHO.NoteCancel = datagetid.NoteCancel;
                        sale_OrderAddKHO.CompanyId = datagetid.CompanyId;
                        sale_OrderAddKHO.deliverydate = datagetid.deliverydate;
                        sale_OrderAddKHO.useridCancel = 0;
                        sale_OrderAddKHO.ispack = false;
                        sale_OrderAddKHO.type = 0;
                        sale_OrderAddKHO.datepack = "";
                        sale_OrderAddKHO.employeepack = null;
                        sale_OrderAddKHO.storeid = storegetid.storeid;
                        sale_OrderAddKHO.transportCompanyid = new Guid("3F1C51E4-199D-49BF-B1DC-D0A3D9A1605E");
                        sale_OrderAddKHO.transportCompanycode = dataexpress.Result.data.ORDER_NUMBER;
                        sale_OrderAddKHO.transportCompanyname = "ViettelPost";
                        sale_OrderAddKHO.waybillCode = datagetid.code;
                        sale_OrderAddKHO.isshipping = false;
                        sale_OrderAddKHO.member_code = datagetid.membercode;
                        sale_OrderAddKHO.storecode = storegetid.code;
                        sale_OrderAddKHO.storename = storegetid.nameStore;
                        sale_OrderAddKHO.storemobile = storegetid.mobileStore;
                        sale_OrderAddKHO.storeaddress = storegetid.address;
                        sale_OrderAddKHO.store_provinceid = storegetid.provinceid;
                        sale_OrderAddKHO.store_districtid = storegetid.districtid;
                        sale_OrderAddKHO.store_rewardid = storegetid.wardid;

                        var listDetail = new List<ListWS_Sale_OrderDetailKHO>();
                        foreach (var itemDetail in datagetid.saleorderline)
                        {
                            var Detail = new ListWS_Sale_OrderDetailKHO();
                            Detail.sale_orderid = null;
                            Detail.productid = itemDetail.productid;
                            Detail.qty = itemDetail.qty;
                            Detail.unitid = itemDetail.unitid;
                            Detail.title = itemDetail.title;
                            Detail.price_sale = itemDetail.price_sale;
                            Detail.price_discount = itemDetail.price_discount;
                            Detail.discount = itemDetail.discount;
                            Detail.Weight = itemDetail.Weight;
                            Detail.total = itemDetail.total;
                            Detail.catalogid = itemDetail.catalogid;
                            Detail.idre = null;
                            Detail.codere = "";
                            Detail.notere = "";
                            Detail.expiryDate = "";
                            Detail.shelfid = null;
                            Detail.receiptid = null;
                            Detail.receiptcode = "";
                            listDetail.Add(Detail);
                        }
                        sale_OrderAddKHO.listDetail = listDetail;
                        var dataAddKHO = apiconnect.InsertSale_OrdersKHO(sale_OrderAddKHO);
                        if (dataAddKHO.Result.Status == ConstUtil.Error)
                        {
                            response.Status = ConstUtil.Error;
                            response.Message = "Có lỗi sảy ra !";
                            return response;
                        }
                    }
                   
                }
                // tạo đơn vãng lai
                var products = objAdd.saleorderline.Where(x => x.isConsignment == 0).ToList();

                var companys = products.GroupBy(x => new { x.companyid }, (k, g) => new { id = k.companyid }).ToList();
                var groupid = Guid.NewGuid();

                foreach (var item in companys)
                {
                    var getidc = new CompanyGetbyId();
                    getidc.id = (Guid)item.id;
                    var companygetid = _CompanyDal.GetById(getidc);
                    var UseInSale = new List<Saleorderuse>();
                    var productInStores = companys.Count > 1 ? products.Where(x => x.companyid == item.id).ToList() : products;
                    var Total = Convert.ToInt32(productInStores.Sum(x => x.total));
                    var WEIGHT = Convert.ToInt32(productInStores.Sum(x => x.Weight));
                    var qty = Convert.ToInt32(productInStores.Sum(x => x.qty));
                    var nameproduct = "";
                    var transferscode = "";
                    foreach (var itempro in productInStores)
                    {
                        nameproduct = nameproduct + itempro.title + ";";
                    }
                    if (Use != null)
                    {
                        foreach (var itemUse in Use)
                        {
                            var productidUse = itemUse.productid;
                            var list = productidUse.Split(',');
                            foreach (var itemList in list)
                            {
                                if (itemList != null && itemList != "")
                                {
                                    var idproductUse = new Guid(itemList);
                                    var count = productInStores.Where(x => x.productid == idproductUse).Count();
                                    if (count > 0)
                                    {
                                        UseInSale.Add(itemUse);
                                        break;
                                    }
                                }
                            }
                        }
                    }


                    var sale = new Sale_OrdersAdd();
                    sale = ReflectionCloner.DeepFieldClone<Sale_OrdersAdd>(objAdd);
                    sale.CompanyId = item.id;
                    if (objAdd.PaymentType == 1)
                    {
                        sale.status = 6;
                    }
                    else
                    {
                        if (isadmin == "1")
                        {
                            sale.status = 0;
                        }
                        else
                        {
                            sale.status = 1;
                        }
                      
                    }
                    sale.storeid = null;
                    sale.receiver_address = companygetid.wh_address;
                    sale.receiver_provinceid = companygetid.wh_provinceid;
                    sale.receiver_rewardid = companygetid.wh_rewardid;
                    sale.receiver_districtid = companygetid.wh_districtid;
                    sale.receiver_fullname = companygetid.nameAdmin;
                    sale.receiver_tel = companygetid.mobileUser;
                    sale.receiver_email = companygetid.emailUser;
                    if (companygetid.sexUser)
                    {
                        sale.member_sex = 1;
                    }
                    else
                    {
                        sale.member_sex = 0;
                    }
                    var getprice = new PriceAllApiViettelPostModel();
                    getprice.SENDER_PROVINCE = (int)sale.receiver_provinceid;
                    getprice.SENDER_DISTRICT = (int)sale.receiver_districtid;
                    getprice.RECEIVER_PROVINCE = (int)sale.member_provinceid;
                    getprice.RECEIVER_DISTRICT = (int)sale.member_districtid;
                    getprice.PRODUCT_WEIGHT = WEIGHT;
                    getprice.PRODUCT_PRICE = Total;
                    getprice.TYPE = 1;
                    getprice.PRODUCT_TYPE = "HH";
                    getprice.MONEY_COLLECTION = Total;
                    var datapvc = api.getallpvc(getprice);
                    var datafor = datapvc.Result.ToList();
                    if (objAdd.typeTransport == 0) // Giao hàng tiêu chuẩn
                    {
                        if (sale.member_provinceid == sale.receiver_provinceid)
                        {
                            foreach (var item1 in datafor)
                            {
                                if (item1.MA_DV_CHINH == "PHS")
                                {
                                    sale.cpvc = item1.GIA_CUOC;
                                    var lines = item1.THOI_GIAN.Split(' ');
                                    var date = DateTime.Now.AddHours(Convert.ToInt32(lines[0]));
                                    sale.deliverydate = ConvertDate(date);
                                    transferscode = "PHS";
                                }
                            }
                        }
                        else
                        {
                            foreach (var item2 in datafor)
                            {
                                if (item2.MA_DV_CHINH == "VTK")
                                {
                                    sale.cpvc = item2.GIA_CUOC;
                                    var lines = item2.THOI_GIAN.Split(' ');
                                    var date = DateTime.Now.AddHours(Convert.ToInt32(lines[0]));
                                    sale.deliverydate = ConvertDate(date);
                                    //sale.deliverydate = date.Year.ToString() + date.Month.ToString() + date.Day.ToString() + date.Hour.ToString() + date.Minute.ToString() + date.Second.ToString();
                                    transferscode = "VTK";
                                }
                            }
                        }
                    }
                    if (objAdd.typeTransport == 1) // Giao hàng nhanh
                    {
                        if (sale.member_provinceid == sale.receiver_provinceid)
                        {
                            foreach (var item1 in datafor)
                            {
                                if (item1.MA_DV_CHINH == "VCN")
                                {
                                    sale.cpvc = item1.GIA_CUOC;
                                    var lines = item1.THOI_GIAN.Split(' ');
                                    var date = DateTime.Now.AddHours(Convert.ToInt32(lines[0]));
                                    sale.deliverydate = ConvertDate(date);
                                    transferscode = "VCN";
                                }
                            }
                        }
                        else
                        {
                            foreach (var item2 in datafor)
                            {
                                if (item2.MA_DV_CHINH == "VBS")
                                {
                                    sale.cpvc = item2.GIA_CUOC;
                                    var lines = item2.THOI_GIAN.Split(' ');
                                    var date = DateTime.Now.AddHours(Convert.ToInt32(lines[0]));
                                    sale.deliverydate = ConvertDate(date);
                                    transferscode = "VBS";
                                }
                            }
                        }
                    }

                    sale.money_total = Total;
                    sale.id = null;
                    sale.saleorderline = productInStores;
                    sale.saleorderUse = UseInSale;
                    sale.transferscode = transferscode;
                    var data = _saleOrdersDal.Insert(sale);
                    if (data == null && data == "")
                    {
                        response.Status = ConstUtil.Error;
                        response.Message = "Có lỗi sảy ra !";
                        return response;
                    }
                    var historycxn = new Sale_OrderHistoryAdd();
                    historycxn.sale_orderid = new Guid(data);
                    historycxn.status = 0;
                    var historydata = _Sale_OrderHistoryDal.Insert(historycxn);
                    if (!historydata)
                    {
                        response.Status = ConstUtil.Error;
                        response.Message = "Có lỗi sảy ra !";
                        return response;
                    }
                    var datagetid = GetbyIdFE(data);
                    datagetid.password = "";
                    var insertFEVL = apiconnect.InsertSale_Orders(datagetid);
                    if (insertFEVL.Result.Status != ConstUtil.Success)
                    {
                        response.Status = ConstUtil.Error;
                        response.Message = "Có lỗi sảy ra !";
                        return response;
                    }
                    listidsale = data + ",";
                    if (objAdd.status == 1)
                    {

                        var express = new ViettelpostCreate();
                        express.ORDER_NUMBER = data;
                        express.GROUPADDRESS_ID = 7367688;
                        express.CUS_ID = 7925014;
                        express.DELIVERY_DATE = "";
                        express.SENDER_FULLNAME = companygetid.nameAdmin;
                        express.SENDER_ADDRESS = companygetid.wh_address;
                        express.SENDER_PHONE = companygetid.mobileUser;
                        express.SENDER_EMAIL = companygetid.emailUser;
                        express.SENDER_WARD = companygetid.wh_rewardid;
                        express.SENDER_DISTRICT = companygetid.wh_districtid;
                        express.SENDER_PROVINCE = companygetid.wh_provinceid;
                        express.SENDER_LATITUDE = 0;
                        express.SENDER_LONGITUDE = 0;
                        express.RECEIVER_FULLNAME = objAdd.member_fullname;
                        express.RECEIVER_ADDRESS = objAdd.member_address;
                        express.RECEIVER_PHONE = objAdd.member_tel;
                        express.RECEIVER_EMAIL = objAdd.member_email;
                        express.RECEIVER_WARD = (int)objAdd.member_rewardid;
                        express.RECEIVER_DISTRICT = (int)objAdd.member_districtid;
                        express.RECEIVER_PROVINCE = (int)objAdd.member_provinceid;
                        express.RECEIVER_LATITUDE = 0;
                        express.RECEIVER_LONGITUDE = 0;
                        express.PRODUCT_NAME = nameproduct;
                        express.PRODUCT_DESCRIPTION = "";
                        express.PRODUCT_QUANTITY = qty;
                        express.PRODUCT_PRICE = Total;
                        express.PRODUCT_WEIGHT = WEIGHT;
                        express.PRODUCT_LENGTH = 0;
                        express.PRODUCT_WIDTH = 0;
                        express.PRODUCT_HEIGHT = 0;
                        express.PRODUCT_TYPE = "HH";
                        express.ORDER_PAYMENT = 2; // thu hộ tiền cước và tiền hàng
                        express.ORDER_SERVICE = transferscode;
                        express.ORDER_SERVICE_ADD = "";
                        express.ORDER_VOUCHER = "";
                        express.ORDER_NOTE = sale.note;

                        express.MONEY_COLLECTION = Total;
                        express.MONEY_TOTALFEE = 0;
                        express.MONEY_FEECOD = 0;
                        express.MONEY_FEEVAS = 0;
                        express.MONEY_FEEINSURRANCE = 0;
                        express.MONEY_FEE = 0;
                        express.MONEY_FEEOTHER = 0;
                        express.MONEY_TOTALVAT = 0;
                        express.MONEY_TOTAL = 0;
                        var dataexpress = api.createorder(express);
                        if (dataexpress.Result.status != 200)
                        {
                            response.Status = ConstUtil.Error;
                            response.Message = "Có lỗi sảy ra !";
                            return response;
                        }
                        else
                        {
                            var expresupdate = new Sale_OrderUpdateExpress();
                            expresupdate.id = new Guid(data);
                            expresupdate.transfersid = dataexpress.Result.data.ORDER_NUMBER;
                            expresupdate.transferscode = transferscode;
                            expresupdate.transfersmoney = dataexpress.Result.data.MONEY_TOTAL;
                            _saleOrdersDal.UpdateExpress(expresupdate);
                            var update = apiconnect.Sale_OrdersUpdateExpress(expresupdate);
                            if (update == null)
                            {
                                response.Status = ConstUtil.Error;
                                response.Message = "Có lỗi sảy ra !";
                                return response;
                            }
                        }
                        

                    }
                }
                var header = new Sale_OrderSelectByListIdHeader();
                header.id = listidsale;
                var dataload = _saleOrdersDal.SelectByListId(header);
                if (dataload != null)
                {
                    response.Status = ConstUtil.Success;
                    response.Message = "Thành công !";
                    response.Data = dataload;
                    return response;
                }
                response.Status = ConstUtil.Error;
                response.Message = "Có lỗi sảy ra !";
                return response;
            }
            catch (Exception ex)
            {
                _logger.Error(ex.Message);
                response.Status = ConstUtil.Error;
                response.Message = "Có lỗi sảy ra !";
                return response;
            }
        }
        public static object ConvertList(List<object> value, Type type)
        {
            var containedType = type.GenericTypeArguments.First();
            return value.Select(item => Convert.ChangeType(item, containedType)).ToList();
        }

        [Authorize(Roles = "FE1B570B-22F1-42E8-847E-A177B931BC57,918C3FCB-F6C4-47B5-AA23-6CD788B010C5")]
        [HttpPost]
        public ResponeResult ChangeStatus(Sale_OrdersChangeStatus objAdd)
        {
            var response = new ResponeResult(ConstUtil.Error, "Có lỗi xảy ra!", null);
            try
            {
                var GetStatus = _saleOrdersDal.GetStatus(objAdd.id);
                if (GetStatus == null)
                {
                    response.Status = ConstUtil.Error;
                    response.Message = "Không tìm thấy đơn hàng !";
                    return response;
                }
                var data = _saleOrdersDal.ChangeStatus(objAdd);
                if (data)
                {
                    var updatestatus = new UpdateOrderViettelPost();
                    
                    if (objAdd.status == 5 && GetStatus.status == 42)
                    {
                        updatestatus.TYPE = 2;
                        updatestatus.ORDER_NUMBER = objAdd.ORDER_NUMBER;
                        updatestatus.NOTE = objAdd.NoteCancel;
                        var update = api.updateorder(updatestatus);
                        if (update.Result.status != 200)
                        {
                            response.Status = ConstUtil.Error;
                            response.Message = update.Result.message;
                            return response;
                        }
                        

                    }
                    if (objAdd.status == 5 && GetStatus.status != 0 && GetStatus.status != 42)
                    {
                        updatestatus.TYPE = 4;
                        updatestatus.ORDER_NUMBER = objAdd.ORDER_NUMBER;
                        updatestatus.NOTE = objAdd.NoteCancel;
                        var update = api.updateorder(updatestatus);
                        if (update.Result.status != 200)
                        {
                            response.Status = ConstUtil.Error;
                            response.Message = update.Result.message;
                            return response;
                        }
                    }
                    if (objAdd.status == 2 && GetStatus.status == 42)
                    {
                        updatestatus.TYPE = 3;
                        updatestatus.ORDER_NUMBER = objAdd.ORDER_NUMBER;
                        updatestatus.NOTE = objAdd.NoteCancel;
                        var update = api.updateorder(updatestatus);
                        if (update.Result.status != 200)
                        {
                            response.Status = ConstUtil.Error;
                            response.Message = update.Result.message;
                            return response;
                        }
                    }
                    
                    if (objAdd.status == 41 && GetStatus.status == 42)
                    {
                        updatestatus.TYPE = 2;
                        updatestatus.ORDER_NUMBER = objAdd.ORDER_NUMBER;
                        updatestatus.NOTE = objAdd.NoteCancel;
                        var update = api.updateorder(updatestatus);
                        if (update.Result.status != 200)
                        {
                            response.Status = ConstUtil.Error;
                            response.Message = update.Result.message;
                            return response;
                        }
                    }
                    if (objAdd.status == 1)
                    {
                        var datagetid = GetbyIdFE(objAdd.id.ToString());
                        var Total = Convert.ToInt32(datagetid.saleorderline.Sum(x => x.total));
                        var WEIGHT = Convert.ToInt32(datagetid.saleorderline.Sum(x => x.Weight));
                        var qty = Convert.ToInt32(datagetid.saleorderline.Sum(x => x.qty));
                        var nameproduct = "";
                        foreach (var itempro in datagetid.saleorderline)
                        {
                            nameproduct = nameproduct + itempro.title + ";";
                        }
                        var express = new ViettelpostCreate();
                        express.ORDER_NUMBER = datagetid.id.ToString();
                        express.GROUPADDRESS_ID = 7367688;
                        express.CUS_ID = 7925014;
                        express.DELIVERY_DATE = "";
                        express.SENDER_FULLNAME = datagetid.receiver_fullname;
                        express.SENDER_ADDRESS = datagetid.receiver_address;
                        express.SENDER_PHONE = datagetid.receiver_tel;
                        express.SENDER_EMAIL = datagetid.receiver_email;
                        express.SENDER_WARD = (int)datagetid.receiver_rewardid;
                        express.SENDER_DISTRICT = (int)datagetid.receiver_districtid;
                        express.SENDER_PROVINCE = (int)datagetid.receiver_provinceid;
                        express.SENDER_LATITUDE = 0;
                        express.SENDER_LONGITUDE = 0;
                        express.RECEIVER_FULLNAME = datagetid.member_fullname;
                        express.RECEIVER_ADDRESS = datagetid.member_address;
                        express.RECEIVER_PHONE = datagetid.member_tel;
                        express.RECEIVER_EMAIL = datagetid.member_email;
                        express.RECEIVER_WARD = (int)datagetid.member_rewardid;
                        express.RECEIVER_DISTRICT = (int)datagetid.member_districtid;
                        express.RECEIVER_PROVINCE = (int)datagetid.member_provinceid;
                        express.RECEIVER_LATITUDE = 0;
                        express.RECEIVER_LONGITUDE = 0;
                        express.PRODUCT_NAME = nameproduct;
                        express.PRODUCT_DESCRIPTION = "";
                        express.PRODUCT_QUANTITY = qty;
                        express.PRODUCT_PRICE = Total;
                        express.PRODUCT_WEIGHT = WEIGHT;
                        express.PRODUCT_LENGTH = 0;
                        express.PRODUCT_WIDTH = 0;
                        express.PRODUCT_HEIGHT = 0;
                        express.PRODUCT_TYPE = "HH";
                        express.ORDER_PAYMENT = 2; // thu hộ tiền cước và tiền hàng
                        express.ORDER_SERVICE = datagetid.transferscode;
                        express.ORDER_SERVICE_ADD = "";
                        express.ORDER_VOUCHER = "";
                        express.ORDER_NOTE = datagetid.note;

                        express.MONEY_COLLECTION = Total;
                        express.MONEY_TOTALFEE = 0;
                        express.MONEY_FEECOD = 0;
                        express.MONEY_FEEVAS = 0;
                        express.MONEY_FEEINSURRANCE = 0;
                        express.MONEY_FEE = 0;
                        express.MONEY_FEEOTHER = 0;
                        express.MONEY_TOTALVAT = 0;
                        express.MONEY_TOTAL = 0;
                        var dataexpress = api.createorder(express);
                        if (dataexpress.Result.status != 200)
                        {
                            response.Status = ConstUtil.Error;
                            response.Message = "Có lỗi sảy ra !";
                            return response;
                        }
                        else
                        {
                            var expresupdate = new Sale_OrderUpdateExpress();
                            expresupdate.id = datagetid.id;
                            expresupdate.transfersid = dataexpress.Result.data.ORDER_NUMBER;
                            expresupdate.transferscode = datagetid.transferscode;
                            expresupdate.transfersmoney = dataexpress.Result.data.MONEY_TOTAL;
                            _saleOrdersDal.UpdateExpress(expresupdate);
                            var update = apiconnect.Sale_OrdersUpdateExpress(expresupdate);
                            if (update == null)
                            {
                                response.Status = ConstUtil.Error;
                                response.Message = "Có lỗi sảy ra !";
                                return response;
                            }

                            var sale_OrderAddKHO = new WS_Sale_OrderAddKHO();
                            sale_OrderAddKHO.sale_Orderidnew = datagetid.id;
                            sale_OrderAddKHO.status = 0;
                            sale_OrderAddKHO.money_total = datagetid.money_total;
                            sale_OrderAddKHO.discount = datagetid.discount;
                            sale_OrderAddKHO.cod = datagetid.cod;
                            sale_OrderAddKHO.cpvc = datagetid.cpvc;
                            sale_OrderAddKHO.memberid = datagetid.memberid;
                            sale_OrderAddKHO.note = datagetid.note;
                            if (datagetid.IsPayment == 0)
                            {
                                sale_OrderAddKHO.IsPayment = false;
                            }
                            else
                            {
                                sale_OrderAddKHO.IsPayment = true;
                            }
                            sale_OrderAddKHO.PaymentType = datagetid.PaymentType;
                            sale_OrderAddKHO.member_fullname = datagetid.member_fullname;
                            sale_OrderAddKHO.member_tel = datagetid.member_tel;
                            sale_OrderAddKHO.member_address = datagetid.member_address;
                            sale_OrderAddKHO.member_email = datagetid.member_email;
                            sale_OrderAddKHO.member_birthday = datagetid.member_birthday;
                            if (datagetid.member_sex == 0)
                            {
                                sale_OrderAddKHO.member_sex = false;
                            }
                            else
                            {
                                sale_OrderAddKHO.member_sex = true;
                            }
                            sale_OrderAddKHO.member_rewardid = datagetid.member_rewardid;
                            sale_OrderAddKHO.member_districtid = datagetid.member_districtid;
                            sale_OrderAddKHO.member_provinceid = datagetid.member_provinceid;
                            sale_OrderAddKHO.NoteCancel = datagetid.NoteCancel;
                            sale_OrderAddKHO.CompanyId = datagetid.CompanyId;
                            sale_OrderAddKHO.deliverydate = datagetid.deliverydate;
                            sale_OrderAddKHO.useridCancel = 0;
                            sale_OrderAddKHO.ispack = false;
                            sale_OrderAddKHO.type = 0;
                            sale_OrderAddKHO.datepack = "";
                            sale_OrderAddKHO.employeepack = null;
                            sale_OrderAddKHO.storeid = datagetid.storeid;
                            sale_OrderAddKHO.transportCompanyid = new Guid("3F1C51E4-199D-49BF-B1DC-D0A3D9A1605E");
                            sale_OrderAddKHO.transportCompanycode = dataexpress.Result.data.ORDER_NUMBER;
                            sale_OrderAddKHO.transportCompanyname = "ViettelPost";
                            sale_OrderAddKHO.waybillCode = datagetid.code;
                            sale_OrderAddKHO.isshipping = false;
                            sale_OrderAddKHO.member_code = datagetid.membercode;
                            sale_OrderAddKHO.storecode = "";
                            sale_OrderAddKHO.storename = datagetid.receiver_fullname;
                            sale_OrderAddKHO.storemobile = datagetid.receiver_tel;
                            sale_OrderAddKHO.storeaddress = datagetid.receiver_address;
                            sale_OrderAddKHO.store_provinceid = datagetid.receiver_provinceid;
                            sale_OrderAddKHO.store_districtid = datagetid.receiver_districtid;
                            sale_OrderAddKHO.store_rewardid = datagetid.receiver_rewardid;

                            var listDetail = new List<ListWS_Sale_OrderDetailKHO>();
                            foreach (var itemDetail in datagetid.saleorderline)
                            {
                                var Detail = new ListWS_Sale_OrderDetailKHO();
                                Detail.sale_orderid = null;
                                Detail.productid = itemDetail.productid;
                                Detail.qty = itemDetail.qty;
                                Detail.unitid = itemDetail.unitid;
                                Detail.title = itemDetail.title;
                                Detail.price_sale = itemDetail.price_sale;
                                Detail.price_discount = itemDetail.price_discount;
                                Detail.discount = itemDetail.discount;
                                Detail.Weight = itemDetail.Weight;
                                Detail.total = itemDetail.total;
                                Detail.catalogid = itemDetail.catalogid;
                                Detail.idre = null;
                                Detail.codere = "";
                                Detail.notere = "";
                                Detail.expiryDate = "";
                                Detail.shelfid = null;
                                Detail.receiptid = null;
                                Detail.receiptcode = "";
                                listDetail.Add(Detail);
                            }
                            sale_OrderAddKHO.listDetail = listDetail;
                            var dataAddKHO = apiconnect.InsertSale_OrdersKHO(sale_OrderAddKHO);
                            if (dataAddKHO.Result.Status == ConstUtil.Error)
                            {
                                response.Status = ConstUtil.Error;
                                response.Message = "Có lỗi sảy ra !";
                                return response;
                            }
                        }

                    }
                    var FEUpdateStatus = new Sale_OrderFEUpdateStatus();
                    FEUpdateStatus.id = objAdd.id;
                    FEUpdateStatus.status = objAdd.status;
                    var FEupdate = apiconnect.UpdateSale_OrdersStatus(FEUpdateStatus);
                    if (FEupdate.Result.Status != ConstUtil.Success)
                    {
                        response.Status = ConstUtil.Error;
                        response.Message = "Có lỗi sảy ra !";
                        return response;
                    }

                    response.Status = ConstUtil.Success;
                    response.Message = "Thành công !";
                    return response;
                }
                response.Status = ConstUtil.Error;
                response.Message = "Có lỗi sảy ra !";
                return response;
            }
            catch (Exception ex)
            {
                _logger.Error(ex.Message);
                response.Status = ConstUtil.Error;
                response.Message = "Có lỗi sảy ra !";
                return response;
            }
        }


        [HttpPost]
        public ResponeResult ChangeStatusVTPOST(Sale_OrdersChangeStatusVTP objAdd)
        {
            var response = new ResponeResult(ConstUtil.Error, "Có lỗi xảy ra!", null);
            try
            {
                System.Net.Http.Headers.HttpRequestHeaders headers = this.Request.Headers;
                
                var token = "MC0CAQACBQCyAxYpAgcMBAAECBQCSQcgBAgrMA3GECAwDOyQICacECAwCkuQIC:aqeqwedssacasc741f182505fa5979706f1redscvhytywwvxv";
                if (objAdd.TOKEN != token)
                {
                    response.Status = ConstUtil.Error;
                    response.Message = "Sai token";
                    return response;
                }
                if (ConstUtil.Approved.Contains(objAdd.DATA.ORDER_STATUS.ToString()))
                {
                    objAdd.DATA.ORDER_STATUS = 1;
                }
                if (ConstUtil.HasGoods.Contains(objAdd.DATA.ORDER_STATUS.ToString()) || ConstUtil.BeingTransported.Contains(objAdd.DATA.ORDER_STATUS.ToString()) || ConstUtil.BeingTransported.Contains(objAdd.DATA.ORDER_STATUS.ToString()) || ConstUtil.SentStore.Contains(objAdd.DATA.ORDER_STATUS.ToString()) || ConstUtil.OnDelivery.Contains(objAdd.DATA.ORDER_STATUS.ToString()))
                {
                    objAdd.DATA.ORDER_STATUS = 2;
                }
                if (ConstUtil.SuccessfulDelivery.Contains(objAdd.DATA.ORDER_STATUS.ToString()))
                {
                    objAdd.DATA.ORDER_STATUS = 3;
                }
                if (ConstUtil.Canceled.Contains(objAdd.DATA.ORDER_STATUS.ToString()) || ConstUtil.SuccessfulDestroyed.Contains(objAdd.DATA.ORDER_STATUS.ToString()))
                {
                    objAdd.DATA.ORDER_STATUS = 5;
                }
                if (ConstUtil.DeliveryFailed.Contains(objAdd.DATA.ORDER_STATUS.ToString()) || ConstUtil.ApprovalReturn.Contains(objAdd.DATA.ORDER_STATUS.ToString()) || ConstUtil.WaitReturn.Contains(objAdd.DATA.ORDER_STATUS.ToString()))
                {
                    objAdd.DATA.ORDER_STATUS = 42;
                }
                
                var data = _saleOrdersDal.ChangeStatusVTP(objAdd);
                if (data != "")
                {
                    var FEUpdateStatus = new Sale_OrderFEUpdateStatus();
                    FEUpdateStatus.id = new Guid(data);
                    FEUpdateStatus.status = objAdd.DATA.ORDER_STATUS;
                    var FEupdate = apiconnect.UpdateSale_OrdersStatus(FEUpdateStatus);
                    if (FEupdate.Result.Status != ConstUtil.Success)
                    {
                        response.Status = ConstUtil.Error;
                        response.Message = "Có lỗi sảy ra !";
                        return response;
                    }

                    response.Status = ConstUtil.Success;
                    response.Message = "Thành công !";
                    return response;
                }
                response.Status = ConstUtil.Error;
                response.Message = "Có lỗi sảy ra !";
                return response;
            }
            catch (Exception ex)
            {
                _logger.Error(ex.Message);
                response.Status = ConstUtil.Error;
                response.Message = "Có lỗi sảy ra !";
                return response;
            }
        }


        [Authorize(Roles = "FE1B570B-22F1-42E8-847E-A177B931BC57,918C3FCB-F6C4-47B5-AA23-6CD788B010C5")]
        [HttpPost]
        public ResponeResult Changetransfers(Sale_OrdersChangetransfers objAdd)
        {
            var response = new ResponeResult(ConstUtil.Error, "Có lỗi xảy ra!", null);
            try
            {
                var data = _saleOrdersDal.Changetransfers(objAdd);
                if (data)
                {
                    response.Status = ConstUtil.Success;
                    response.Message = "Thành công !";
                    return response;
                }
                response.Status = ConstUtil.Error;
                response.Message = "Có lỗi sảy ra !";
                return response;
            }
            catch (Exception ex)
            {
                _logger.Error(ex.Message);
                response.Status = ConstUtil.Error;
                response.Message = "Có lỗi sảy ra !";
                return response;
            }
        }

        [Authorize(Roles = "FE1B570B-22F1-42E8-847E-A177B931BC57")]
        [HttpPost]
        public ResponeResult Delete(Sale_OrdersDeleted obj)
        {
            var response = new ResponeResult(ConstUtil.Error, "Có lỗi xảy ra!", null);
            try
            {
                var data = _saleOrdersDal.Delete(obj);
                if (data == 1)
                {
                    response.Status = ConstUtil.Success;
                    response.Message = "Thành công !";
                    return response;
                }
                if (data == 0)
                {
                    response.Status = ConstUtil.Incompetent;
                    response.Message = "Bạn không có quyền!";
                    return response;
                }
                response.Status = ConstUtil.Error;
                response.Message = "Có lỗi sảy ra !";
                return response;
            }
            catch (Exception ex)
            {
                _logger.Error(ex.Message);
                response.Status = ConstUtil.Error;
                response.Message = "Có lỗi sảy ra !";
                return response;
            }
        }

        [HttpPost]
        public ResponeResult InsertFE(Sale_OrdersAdd obj)
        {
            var response = new ResponeResult(ConstUtil.Error, "Có lỗi xảy ra!", null);
            try
            {
                var data = _saleOrdersDal.InsertFE(obj);
                if (data != null && data != "")
                {
                    response.Status = ConstUtil.Success;
                    response.Message = "Thành công !";
                    response.Data = data;
                    return response;
                }
                response.Status = ConstUtil.Error;
                response.Message = "Có lỗi sảy ra !";
                return response;
            }
            catch (Exception ex)
            {
                _logger.Error(ex.Message);
                response.Status = ConstUtil.Error;
                response.Message = "Có lỗi sảy ra !";
                return response;
            }
        }

        [Authorize(Roles = "FE1B570B-22F1-42E8-847E-A177B931BC57,918C3FCB-F6C4-47B5-AA23-6CD788B010C5")]
        [HttpPost]
        public ResponeResult Lock(Sale_OrdersLock obj)
        {
            var response = new ResponeResult(ConstUtil.Error, "Có lỗi xảy ra!", null);
            try
            {
                var data = _saleOrdersDal.IsLock(obj);
                if (data == 1)
                {
                    response.Status = ConstUtil.Success;
                    response.Message = "Thành công !";
                    return response;
                }
                if (data == 0)
                {
                    response.Status = ConstUtil.Incompetent;
                    response.Message = "Bạn không có quyền!";
                    return response;
                }
                response.Status = ConstUtil.Error;
                response.Message = "Có lỗi sảy ra !";
                return response;
            }
            catch (Exception ex)
            {
                _logger.Error(ex.Message);
                response.Status = ConstUtil.Error;
                response.Message = "Có lỗi sảy ra !";
                return response;
            }
        }
        #endregion

        [Authorize(Roles = "FE1B570B-22F1-42E8-847E-A177B931BC57,918C3FCB-F6C4-47B5-AA23-6CD788B010C5")]
        [HttpPost]
        public ResponeResult Sale_Order_UseInsert(Sale_Order_UseDetail objAdd)
        {
            var response = new ResponeResult(ConstUtil.Error, "Có lỗi xảy ra!", null);
            try
            {
                var data = _saleOrdersDal.Sale_Order_UseInsert(objAdd);
                if (data)
                {
                    response.Status = ConstUtil.Success;
                    response.Message = "Thành công !";
                    return response;
                }
                response.Status = ConstUtil.Error;
                response.Message = "Có lỗi sảy ra !";
                return response;
            }
            catch (Exception ex)
            {
                _logger.Error(ex.Message);
                response.Status = ConstUtil.Error;
                response.Message = "Có lỗi sảy ra !";
                return response;
            }
        }



        public Sale_OrdersAdd GetbyIdFE(string id)
        {
            var getid = new Sale_OrdersGetbyId();
            getid.id = new Guid(id);
            var data = new Sale_OrdersAdd();
            var saleorderline = new List<Saleorderline>();
            var saleorderuse = new List<Saleorderuse>();
            data = _saleOrdersDal.GetByIdFE(getid);
            saleorderline = _saleOrdersDal.Sale_Order_LinesSelectByIdFE(getid);
            saleorderuse = _saleOrdersDal.Sale_Order_UseSelectByIdFE(getid);
            data.saleorderline = saleorderline;
            data.saleorderUse = saleorderuse;
            return data;
        }

        public string ConvertDate(DateTime olddate)
        {
            var month = "";
            var day = "";
            if (olddate.Month < 10)
            {
                month = "0" + olddate.Month.ToString();
            }
            else
            {
                month = olddate.Month.ToString();
            }

            if (olddate.Day < 10)
            {
                day = "0" + olddate.Day.ToString();
            }
            else
            {
                day = olddate.Day.ToString();
            }


            return olddate.Year.ToString() + month + day + "000000";
        }
    }
}