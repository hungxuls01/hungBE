using _2.DataTransferObject;
using _3.Data;
using _4.Utils;
using NLog;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Net.Security;
using System.Threading.Tasks;
using System.Web;

namespace ApiTng.apiconnect
{
    public class Api
    {
        private static Logger _logger = LogManager.GetCurrentClassLogger();

        #region danh muc benh

        public async Task<ResponeResult> GetbyIdProductCatalog(Product_CatalogGetById priceApiModel)
        {
            ServicePointManager.ServerCertificateValidationCallback = new RemoteCertificateValidationCallback
         (
             delegate { return true; }
         );
            var responseoutput = new ResponeResult(ConstUtil.Error, "Có lỗi xảy ra!", null);
            HttpClient client = new HttpClient();
            client.BaseAddress = new Uri("http://103.124.94.51:8033/");
            // Add an Accept header for JSON format.
            client.DefaultRequestHeaders.Accept.Clear();
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            HttpResponseMessage response = await client.PostAsJsonAsync("api/CategorySick/GetById", priceApiModel).ConfigureAwait(false);

            if (response.IsSuccessStatusCode)
            {
                responseoutput = await response.Content.ReadAsAsync<ResponeResult>().ConfigureAwait(false);
            }
            return responseoutput;
        }

        public async Task<ResponeResult> InsertProductCatalogAsync(Product_CatalogAdd priceApiModel)
        {
            ServicePointManager.ServerCertificateValidationCallback = new RemoteCertificateValidationCallback
         (
             delegate { return true; }
         );
            var responseoutput = new ResponeResult(ConstUtil.Error, "Có lỗi xảy ra!", null);
            HttpClient client = new HttpClient();
            client.BaseAddress = new Uri("http://103.124.94.51:8033/");
            // Add an Accept header for JSON format.
            client.DefaultRequestHeaders.Accept.Clear();
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            HttpResponseMessage response = await client.PostAsJsonAsync("api/CategorySick/CategorySickInsert", priceApiModel).ConfigureAwait(false);

            if (response.IsSuccessStatusCode)
            {
                responseoutput = await response.Content.ReadAsAsync<ResponeResult>().ConfigureAwait(false);
            }
            return responseoutput;
        }

        public async Task<ResponeResult> UpdateProductCatalogAsync(Product_CatalogAdd priceApiModel)
        {
            ServicePointManager.ServerCertificateValidationCallback = new RemoteCertificateValidationCallback
         (
             delegate { return true; }
         );
            var responseoutput = new ResponeResult(ConstUtil.Error, "Có lỗi xảy ra!", null);
            HttpClient client = new HttpClient();
            client.BaseAddress = new Uri("http://103.124.94.51:8033/");

            // Add an Accept header for JSON format.
            client.DefaultRequestHeaders.Accept.Clear();
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            HttpResponseMessage response = await client.PostAsJsonAsync("api/CategorySick/CategorySickUpdate", priceApiModel).ConfigureAwait(false);

            if (response.IsSuccessStatusCode)
            {
                responseoutput = await response.Content.ReadAsAsync<ResponeResult>().ConfigureAwait(false);
            }
            return responseoutput;
        }


        public async Task<ResponeResult> ProductCatalogUpdateIslockAsync(Product_CatalogUpdateIslock priceApiModel)
        {
            ServicePointManager.ServerCertificateValidationCallback = new RemoteCertificateValidationCallback
         (
             delegate { return true; }
         );
            var responseoutput = new ResponeResult(ConstUtil.Error, "Có lỗi xảy ra!", null);
            HttpClient client = new HttpClient();
            client.BaseAddress = new Uri("http://103.124.94.51:8033/");
            // Add an Accept header for JSON format.
            client.DefaultRequestHeaders.Accept.Clear();
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            HttpResponseMessage response = await client.PostAsJsonAsync("api/CategorySick/CategorySickUpdateIslock", priceApiModel).ConfigureAwait(false);

            if (response.IsSuccessStatusCode)
            {
                responseoutput = await response.Content.ReadAsAsync<ResponeResult>().ConfigureAwait(false);
            }
            return responseoutput;
        }

        #endregion



        



        #region GET KHO
        public async Task<List<Product_StoreGetKHODetail>> GetKHO(ListProduct_StoreGetKHO priceApiModel)
        {
            ServicePointManager.ServerCertificateValidationCallback = new RemoteCertificateValidationCallback
         (
             delegate { return true; }
         );
            var responseoutput = new List<Product_StoreGetKHODetail>();
            HttpClient client = new HttpClient();
            client.BaseAddress = new Uri("http://103.124.94.51:8035/");
            // Add an Accept header for JSON format.
            client.DefaultRequestHeaders.Accept.Clear();
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            HttpResponseMessage response = await client.PostAsJsonAsync("api/Product_Store/GetKHO", priceApiModel).ConfigureAwait(false);

            if (response.IsSuccessStatusCode)
            {
                responseoutput = await response.Content.ReadAsAsync<List<Product_StoreGetKHODetail>>().ConfigureAwait(false);
            }
            return responseoutput;
        }
        #endregion
        #region Tin nhắn SMS CMC

        public bool SMSOTP(string Phonenumber, string token)
        {
            var objCMC = new UserCMC();
            objCMC.Phonenumber = Phonenumber;
            objCMC.Message = "SanDongY: Ma xac thuc SDT cua ban la: " + token + ". Ma co hieu luc trong vong 15 phut. Khong chia se ma nay voi nguoi khac";
            objCMC.Brandname = "SanDongY";
            var cmc = SendSMS(objCMC);
            if (cmc.Result.Code != "1")
            {
                _logger.Error(cmc.Result.Description);
                return false;
            }
            return true;
        }

        public bool SMSSendPass( string Phonenumber,string passnotMD5)
        {
            var objCMC = new UserCMC();
            objCMC.Phonenumber = Phonenumber;
            objCMC.Message = "SanDongY: QKH da dang ki thanh cong. Mat khau tai khoan la: " + passnotMD5 + ", chi tiet LH https:// sandongy.com.vn, 1900232424 ( cuoc 1000d/p)";
            objCMC.Brandname = "SanDongY";
            var cmc = SendSMS(objCMC);
            if (cmc.Result.Code != "1")
            {
                _logger.Error(cmc.Result.Description);
                return false;
            }
            return true;
        }

        public bool SMSSendSuccessOrder(string Phonenumber, string codeOrder, string money_total)
        {
            var objCMC = new UserCMC();
            objCMC.Phonenumber = Phonenumber;
            objCMC.Message = "SanDongY: Cam on QKH da dat hang. MDH: " + codeOrder + ",tong tien thanh toan: " + money_total + " vnd chi tiet LH https:// sandongy.com.vn, 1900232424 ( cuoc 1000d/p)";
            objCMC.Brandname = "SanDongY";
            var cmc = SendSMS(objCMC);
            if (cmc.Result.Code != "1")
            {
                _logger.Error(cmc.Result.Description);
                return false;
            }
            return true;
        }

        public bool SMSSendDiscountCode(string Phonenumber, string Discount)
        {
            var objCMC = new UserCMC();
            objCMC.Phonenumber = Phonenumber;
            objCMC.Message = "Cam on ban da mua san pham tai https://sandongy.com.vn/. Ma gioi thieu cua ban la "+ Discount + ". Ap dung tru 25% cho don hang tiep theo hoac gioi thieu cho nguoi than don hang duoc tru 10% gia tri va cong 15% vao vi SDY cua ban. Chi tiet truy cap https://sandongy.com.vn/";
            objCMC.Brandname = "SanDongY";
            var cmc = SendSMS(objCMC);
            if (cmc.Result.Code != "1")
            {
                _logger.Error(cmc.Result.Description);
                return false;
            }
            return true;
        }
        public bool SMSSendSuccessDiscount(string Phonenumber, string money_total, string Phonemember,string code)
        {
            var objCMC = new UserCMC();
            objCMC.Phonenumber = Phonenumber;
            objCMC.Message = "Ban duoc cong "+ money_total + " VND vao vi SDY do so dien thoai "+ Phonemember + " nhap ma gioi thieu cua ban vao don hang "+ code + ". Vui long vao Vi SDY tren https://sandongy.com.vn/";
            objCMC.Brandname = "SanDongY";
            var cmc = SendSMS(objCMC);
            if (cmc.Result.Code != "1")
            {
                _logger.Error(cmc.Result.Description);
                return false;
            }
            return true;
        }
        public async Task<body> SendSMS(UserCMC obj)
        {
            var userCMC = ConfigurationManager.AppSettings["userCMC"];
            var passCMC = ConfigurationManager.AppSettings["passCMC"];
            obj.user = userCMC;
            obj.pass = passCMC;
            ServicePointManager.ServerCertificateValidationCallback = new RemoteCertificateValidationCallback
         (
             delegate { return true; }
         );
            var responseoutput = new body();
            HttpClient client = new HttpClient();
            client.BaseAddress = new Uri("http://124.158.14.49/");
            // Add an Accept header for JSON format.
            client.DefaultRequestHeaders.Accept.Clear();
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            HttpResponseMessage response = await client.PostAsJsonAsync("CMC_RF/api/sms/Send", obj).ConfigureAwait(false);

            if (response.IsSuccessStatusCode)
            {
                responseoutput = await response.Content.ReadAsAsync<body>().ConfigureAwait(false);
            }
            return responseoutput;
        }

        public class body
        {
            public string Code { get; set; }
            public string Description { get; set; }
            public DATA Data { get; set; }
        }
        public class DATA
        {
            public string Brandname { get; set; }
            public string Phonenumber { get; set; }
            public string Message { get; set; }
            public string Status { get; set; }
            public string StatusDescription { get; set; }
        }

        public class UserCMC
        {
            public string Brandname { get; set; }
            public string Message { get; set; }
            public string Phonenumber { get; set; }
            public string user { get; set; }
            public string pass { get; set; }
        }
        #endregion




    }

}