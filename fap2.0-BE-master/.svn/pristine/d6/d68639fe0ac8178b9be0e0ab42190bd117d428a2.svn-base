using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using _2.DataTransferObject;
using _4.Utils;

namespace _1.DataAccessLayer.Reward
{
    public class RewardDal : DbInteractionBase, IRewardDal
    {
        #region BACKEND

        public int IsLock(RewardLock obj)
        {
            DataTable arrayId = new DataTable();
            arrayId.Columns.Add("id", typeof(int));

            foreach (var item in ConvertUtil.GetValuesArray(obj.arrayId))
            {
                arrayId.Rows.Add(item);
            }
            return ExecuteNonQueryOutput("sp_RewardIsLock", new List<QueryParam>
            {
                new QueryParam {NameParam ="islock",ValueParam = obj.islock},
                new QueryParam {NameParam ="ArrayId",ValueParam = arrayId},
                new QueryParam {NameParam ="role",ValueParam = obj.role},
                new QueryParam {NameParam ="CategoryId",ValueParam = obj.CategoryId},
                new QueryParam {NameParam ="UserId",ValueParam = obj.UserId},
                new QueryParam {NameParam = "IsIncompetent", IsOutParam = true}
            });
        }

        public int Delete(RewardDeleted objDeleted)
        {
            DataTable arrayId = new DataTable();
            arrayId.Columns.Add("id", typeof(int));

            foreach (var item in ConvertUtil.GetValuesArray(objDeleted.ArrayId))
            {
                arrayId.Rows.Add(item);
            }
            return ExecuteNonQueryOutput("sp_RewardDelete", new List<QueryParam>
            {
                new QueryParam {NameParam ="ArrayId",ValueParam = arrayId},
                 new QueryParam {NameParam ="role",ValueParam = objDeleted.role},
                new QueryParam {NameParam ="CategoryId",ValueParam = objDeleted.CategoryId},
                new QueryParam {NameParam ="UserId",ValueParam = objDeleted.UserId},
                new QueryParam {NameParam = "IsIncompetent", IsOutParam = true}
            });
        }

        public Tuple<RewardAdd, int> GetById(RewardGetbyId objGetbyId)
        {
            return ExecuteReaderObjectOutput<RewardAdd>("sp_RewardSelectById", new List<QueryParam>
            {
                new QueryParam {NameParam ="id",ValueParam = objGetbyId.id},
                new QueryParam {NameParam ="role",ValueParam = objGetbyId.role},
                new QueryParam {NameParam ="CategoryId",ValueParam = objGetbyId.CategoryId},
                new QueryParam {NameParam ="UserId",ValueParam = objGetbyId.UserId},
                new QueryParam {NameParam = "IsIncompetent", IsOutParam = true}
            });
        }

        public int Insert(RewardAdd objAdd)
        {
            return ExecuteNonQueryOutput("sp_RewardInsertOrUpdate", new List<QueryParam>
            {
                new QueryParam {NameParam = "id", ValueParam = objAdd.id},
                new QueryParam {NameParam = "title", ValueParam = objAdd.title},
                new QueryParam {NameParam = "code", ValueParam = objAdd.code},
                new QueryParam {NameParam = "type", ValueParam = objAdd.type},
                new QueryParam {NameParam = "districtid", ValueParam = objAdd.districtid},
                new QueryParam {NameParam = "role", ValueParam = objAdd.role},
                new QueryParam {NameParam = "UserId", ValueParam = objAdd.UserId},
                new QueryParam {NameParam = "CategoryId", ValueParam = objAdd.CategoryId},
                new QueryParam {NameParam = "IsIncompetent", IsOutParam = true}
            });
        }

        #endregion
        #region FONTEND
        public List<RewardCombobox> GetCombobox(int id)
        {
            return ExecuteReader<RewardCombobox>("sp_RewardSelectCombobox", new List<QueryParam>
            {
                new QueryParam {NameParam = "districtid", ValueParam = id}
            });
        }
        #endregion

    }
}