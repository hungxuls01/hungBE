using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using _2.DataTransferObject;
using _4.Utils;

namespace _1.DataAccessLayer.Store
{
    public class StoreDal : DbInteractionBase, IStoreDal
    {
        #region Authorize

        /// <summary>
        /// select store by paging
        /// </summary>
        /// <param name="obj"></param>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <returns></returns>
        public Tuple<int, List<StoreList>> SelectPaging(StoreSearchDto obj, int pageIndex, int pageSize)
        {
            return ExecuteReaderPaging<StoreList>("sp_StoreSelectPaging", new List<QueryParam>
            {
                new QueryParam {NameParam = "Keyword", ValueParam = obj.Keyword},
                new QueryParam {NameParam = "Status", ValueParam = obj.Status},
                new QueryParam {NameParam = "PageIndex", ValueParam = pageIndex},
                new QueryParam {NameParam = "PageSize", ValueParam = pageSize},
                new QueryParam {NameParam = "order", ValueParam = obj.Order},
                new QueryParam {NameParam = "orderdir", ValueParam = obj.Orderdir},
                new QueryParam {NameParam = "RecordCount", IsOutParam = true}
            });
        }

        /// <summary>
        ///  Lock or unlock store
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public int IsLock(StoreLock obj)
        {
            DataTable arrayId = new DataTable();
            arrayId.Columns.Add("id", typeof(int));

            foreach (var item in ConvertUtil.GetValuesArray(obj.arrayId))
            {
                arrayId.Rows.Add(item);
            }
            return ExecuteNonQueryOutput("sp_StoreIsLock", new List<QueryParam>
            {
                new QueryParam {NameParam ="islock",ValueParam = obj.islock},
                new QueryParam {NameParam ="ArrayId",ValueParam = arrayId},
                new QueryParam {NameParam = "IsIncompetent", IsOutParam = true}
            });
        }

        /// <summary>
        /// Deleted by store
        /// </summary>
        /// <param name="objDeleted"></param>
        /// <returns></returns>
        public int Delete(StoreDeleted objDeleted)
        {
            DataTable arrayId = new DataTable();
            arrayId.Columns.Add("id", typeof(int));

            foreach (var item in ConvertUtil.GetValuesArray(objDeleted.ArrayId))
            {
                arrayId.Rows.Add(item);
            }
            return ExecuteNonQueryOutput("sp_StoreDelete", new List<QueryParam>
            {
                new QueryParam {NameParam ="ArrayId",ValueParam = arrayId},
                new QueryParam {NameParam = "IsIncompetent", IsOutParam = true}
            });
        }

        /// <summary>
        /// Select store by Id
        /// </summary>
        /// <param name="objGetbyId"></param>
        /// <returns></returns>
        public StoreAdd GetById(StoreGetbyId objGetbyId)
        {
            return ExecuteReaderObject<StoreAdd>("sp_StoreSelectById", new List<QueryParam>
            {
                new QueryParam {NameParam ="id",ValueParam = objGetbyId.id}
            });
        }

        /// <summary>
        /// Insert or update store
        /// </summary>
        /// <param name="objAdd"></param>
        /// <returns></returns>
        public int Insert(StoreAdd objAdd)
        {
            return ExecuteNonQueryOutput("sp_StoreInsertOrUpdate", new List<QueryParam>
            {
                new QueryParam {NameParam = "id", ValueParam = objAdd.id},
                new QueryParam {NameParam = "address", ValueParam = objAdd.address},
                new QueryParam {NameParam = "mail", ValueParam = objAdd.mail},
                new QueryParam {NameParam = "contactname", ValueParam = objAdd.contactname},
                new QueryParam {NameParam = "contactnumber", ValueParam = objAdd.contactnumber},
                new QueryParam {NameParam = "provinceid", ValueParam = objAdd.provinceid},
                new QueryParam {NameParam = "districtid", ValueParam = objAdd.districtid},
                new QueryParam {NameParam = "rewardid", ValueParam = objAdd.rewardid},
                new QueryParam {NameParam = "IsIncompetent", IsOutParam = true}
            });
        }

        /// <summary>
        ///  select store by id to display
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public Tuple<StoreView, int> View(StoreGetbyId obj)
        {
            return ExecuteReaderObjectOutput<StoreView>("sp_StoreSelectByIdView", new List<QueryParam>
            {
                new QueryParam {NameParam ="id",ValueParam = obj.id},
                new QueryParam {NameParam = "IsIncompetent", IsOutParam = true}
            });
        }

        #endregion

        #region Not Authorized

        /// <summary>
        ///  Thông tin cửa hàng
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public List<GetStore> FeGetStore(int id)
        {
            return ExecuteReader<GetStore>("fe_Store_Info", new List<QueryParam>
            {
                new QueryParam {NameParam = "id", ValueParam = id}
            });
        }

        /// <summary>
        /// select list store by userd id
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public List<StoreSelectByUserId> SelectByUserId(int id)
        {
            return ExecuteReader<StoreSelectByUserId>("sp_StoreSelectByUserId", new List<QueryParam>
            {
                new QueryParam {NameParam = "id", ValueParam = id}
            });
        }

        #endregion
    }
}