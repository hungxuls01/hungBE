using _1.DataAccessLayer.Notification;
using _2.DataTransferObject;
using _4.Utils;
using Newtonsoft.Json;
using NLog;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Http.Cors;

namespace ApiTng.Controllers
{
    [EnableCors(origins: "*", headers: "*", methods: "*")]
    public class NotificationController : ApiController
    {
        private static INotificationDal _NotificationDal;
        private static Logger _logger;

        public NotificationController()
        {
            _NotificationDal = new NotificationDal();
            _logger = LogManager.GetCurrentClassLogger();
        }
        // GET api/values
        [HttpPost]
        public ResponeResult Get(NotificationSearchDto obj)
        {
            var respone = new ResponeResult(ConstUtil.Error, "Có lỗi xảy ra!", null);
            try
            {
                var result = _NotificationDal.Select();
                var data = new DataTableBase<NotificationDto>(result, result.Count(), obj.PageIndex + 1).Init();
                if (result != null)
                {
                    respone.Status = ConstUtil.Success;
                    respone.Message = "Thành công !";
                    respone.Data = data;
                    return respone;
                }
                else
                {
                    respone.Status = ConstUtil.Error;
                    respone.Message = "Không tìm thấy dữ liệu!";
                    return respone;
                }
            }
            catch (Exception ex)
            {
                _logger.Error(ex.Message);
                respone.Status = ConstUtil.Error;
                respone.Message = "Có lỗi sảy ra !";
                return respone;
            }
        }

        // GET api/values/5


        // POST api/values
        [HttpPost]
        public ResponeResult Insert(NotificationAdd objAdd)
        {
            var respone = new ResponeResult(ConstUtil.Error, "Có lỗi xảy ra!", null);
            try
            {
                var data = _NotificationDal.Insert(objAdd);
                if (data)
                {
                    respone.Status = ConstUtil.Success;
                    respone.Message = "Thành công !";
                    return respone;
                }
                else
                {
                    respone.Status = ConstUtil.Error;
                    respone.Message = "Có lỗi sảy ra !";
                    return respone;
                }
            }
            catch (Exception ex)
            {
                _logger.Error(ex.Message);
                respone.Status = ConstUtil.Error;
                respone.Message = "Có lỗi sảy ra !";
                return respone;
            }
        }
        #region FONTEND
        [HttpGet]
        public ResponeResult FeGetNotification(int id)
        {
            var response = new ResponeResult(ConstUtil.Error, "Có lỗi xảy ra!", null);
            try
            {
                var data = _NotificationDal.FeGetListNotification(id);
                if (data != null)
                {
                    response.Status = ConstUtil.Success;
                    response.Message = "Thành công !";
                    response.Data = data;
                    return response;
                }
                response.Status = ConstUtil.Error;
                response.Message = "Có lỗi sảy ra !";
                return response;
            }
            catch (Exception ex)
            {
                _logger.Error(ex.Message);
                response.Status = ConstUtil.Error;
                response.Message = ex.ToString();
                return response;
            }
        }
        #endregion

    }
}