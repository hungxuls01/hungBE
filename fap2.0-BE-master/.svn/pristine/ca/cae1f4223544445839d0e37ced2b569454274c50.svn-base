using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Web;

namespace _4.Utils
{
    public class HmacshaUtil
    {
        public static string Key { get; set; }
        public static string Secret { get; set; }
        public HmacshaUtil()
        {
            Key = "51f42d62a8c741f182505fa5979706f1";
            Secret = "MC0CAQACBQCyAxYpAgMBAAECBQCSQcgBAgMA3GECAwDOyQICacECAwCkuQIC";
        }
        public static string Encrypt(string toEncrypt)
        {
            byte[] keyArray;
            byte[] toEncryptArray = UTF8Encoding.UTF8.GetBytes(toEncrypt);

            System.Configuration.AppSettingsReader settingsReader =
                                                new AppSettingsReader();
            // Get the key from config file

            string key = "51f42d62a8c741f182505fa5979706f1";
            //System.Windows.Forms.MessageBox.Show(key);
            //If hashing use get hashcode regards to your key
            MD5CryptoServiceProvider hashmd5 = new MD5CryptoServiceProvider();
            keyArray = hashmd5.ComputeHash(UTF8Encoding.UTF8.GetBytes(key));
            //Always release the resources and flush data
            // of the Cryptographic service provide. Best Practice

            hashmd5.Clear();

            TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();
            //set the secret key for the tripleDES algorithm
            tdes.Key = keyArray;
            //mode of operation. there are other 4 modes.
            //We choose ECB(Electronic code Book)
            tdes.Mode = CipherMode.ECB;
            //padding mode(if any extra byte added)

            tdes.Padding = PaddingMode.PKCS7;

            ICryptoTransform cTransform = tdes.CreateEncryptor();
            //transform the specified region of bytes array to resultArray
            byte[] resultArray =
              cTransform.TransformFinalBlock(toEncryptArray, 0,
              toEncryptArray.Length);
            //Release resources held by TripleDes Encryptor
            tdes.Clear();
            //Return the encrypted data into unreadable string format
            return Convert.ToBase64String(resultArray, 0, resultArray.Length);
        }
        public static string ComputeHash()
        {
            string key = "51f42d62a8c741f182505fa5979706f1";
            string message = "anhduc11111111111111111111111111111111111111111111111111111";

            byte[] keyByte = new ASCIIEncoding().GetBytes(key);
            byte[] messageBytes = new ASCIIEncoding().GetBytes(message);

            byte[] hashmessage = new HMACSHA256(keyByte).ComputeHash(messageBytes);

            // to lowercase hexits
            String.Concat(Array.ConvertAll(hashmessage, x => x.ToString("x2")));

            // to base64
            return Convert.ToBase64String(hashmessage);

        }

        public static string Decrypt(string cipherString)
        {
            byte[] keyArray;
            //get the byte code of the string

            byte[] toEncryptArray = Convert.FromBase64String(cipherString);

            System.Configuration.AppSettingsReader settingsReader =
                                                new AppSettingsReader();
            //Get your key from config file to open the lock!
            string key = (string)settingsReader.GetValue("SecurityKey",
                                                         typeof(String));


            //if hashing was not implemented get the byte code of the key
            keyArray = UTF8Encoding.UTF8.GetBytes(key);


            TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();
            //set the secret key for the tripleDES algorithm
            tdes.Key = keyArray;
            //mode of operation. there are other 4 modes. 
            //We choose ECB(Electronic code Book)

            tdes.Mode = CipherMode.ECB;
            //padding mode(if any extra byte added)
            tdes.Padding = PaddingMode.PKCS7;

            ICryptoTransform cTransform = tdes.CreateDecryptor();
            byte[] resultArray = cTransform.TransformFinalBlock(
                                 toEncryptArray, 0, toEncryptArray.Length);
            //Release resources held by TripleDes Encryptor                
            tdes.Clear();
            //return the Clear decrypted TEXT
            return UTF8Encoding.UTF8.GetString(resultArray);
        }
        //public static string CreateToken(string method, string path, string data)
        //    {

        //        // timestamp in millisecond
        //        long time = new DateTimeOffset(DateTime.UtcNow).ToUnixTimeMilliseconds();

        //        // Hash HMAC256
        //        string rawSignature = string.Format("{0}\r\n{1}\r\n{2}\r\n\r\n{3}", time, method, path, data);

        //        string signature = GetHashMach(rawSignature, Secret);

        //        //Create token
        //        string token = string.Format("hmac {0}:{1}:{2}", Key, time, signature);
        //        return token;
        //    }

        //    private string GetHashMach(string message, string secret)
        //    {
        //        try
        //        {
        //            secret = secret ?? "";
        //            var encoding = new System.Text.ASCIIEncoding();
        //            byte[] keyByte = encoding.GetBytes(secret);
        //            byte[] messageBytes = encoding.GetBytes(message);
        //            using (var hmacsha256 = new HMACSHA256(keyByte))
        //            {
        //                byte[] hashmessage = hmacsha256.ComputeHash(messageBytes);
        //                return Convert.ToBase64String(hashmessage);
        //            }
        //        }
        //        catch (Exception)
        //        {
        //            return "";
        //        }
        //    }
        public static string GetHashMach(string message, string secret)
        {
            HMACSHA256 hmac = new HMACSHA256(Encoding.UTF8.GetBytes(secret));
            hmac.Initialize();

            byte[] buffer = Encoding.UTF8.GetBytes(message);

            string signature = BitConverter.ToString(hmac.ComputeHash(buffer)).Replace("-", "").ToLower();

            return signature;
        }

        /// <summary>
        /// Create Token
        /// </summary>
        /// <param name="method"></param>
        /// <param name="path"></param>
        /// <param name="data"></param>
        /// <returns></returns>
        //public static string CreateToken(string method, string path, string data)
        //{

        //    // timestamp in millisecond
        //    long time = new DateTimeOffset(DateTime.UtcNow).ToUnixTimeMilliseconds();

        //    // Hash HMAC256
        //    string rawSignature = string.Format("{0}\r\n{1}\r\n{2}\r\n\r\n{3}", time, method, path, data);

        //    string signature = GetHashMach(rawSignature, Secret);

        //    //Create token
        //    string token = string.Format("hmac {0}:{1}:{2}", Key, time, signature);
        //    return token;
        //}
        public static string HmacSHA256(string key, string data)
        {
            string hash;
            ASCIIEncoding encoder = new ASCIIEncoding();
            Byte[] code = encoder.GetBytes(key);
            using (HMACSHA256 hmac = new HMACSHA256(code))
            {
                Byte[] hmBytes = hmac.ComputeHash(encoder.GetBytes(data));
                hash = ToHexString(hmBytes);
            }
            return hash;
        }

        public static string ToHexString(byte[] array)
        {
            StringBuilder hex = new StringBuilder(array.Length * 2);
            foreach (byte b in array)
            {
                hex.AppendFormat("{0:x2}", b);
            }
            return hex.ToString();
        }
        public static string CreateToken(string method, string path, string data, string time)
        {
            string Key = "51f42d62a8c741f182505fa5979706f1";
            string Secret = "MC0CAQACBQCyAxYpAgMBAAECBQCSQcgBAgMA3GECAwDOyQICacECAwCkuQIC";
            

            // Hash HMAC256
            string rawSignature = string.Format("{0}\r\n{1}\r\n{2}\r\n\r\n{3}", time, method, path, data);

            string signature = GetHashMach(rawSignature, Secret);

            //Create token
            string token = string.Format("hmac {0}:{1}:{2}", Key, time, signature);
            return token;
        }

    }
}