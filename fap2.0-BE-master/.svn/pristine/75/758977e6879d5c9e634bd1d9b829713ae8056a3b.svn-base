using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using System.Web;
using System.Web.Script.Serialization;

namespace ApiTng.ApiExpress
{
    public class LoziService
    {

        //        POST: https://lungo.loship.vn/v1/partners/tng/orders
        //Header: X-Signature mac = signature
        //{
        //    orderId: int
        //    timestamp: int (second)
        //    partnerCode: string
        //    }
        //    Example body:
        //{
        //    orderId: 12.
        //    timestamp: 1566448370,
        //    partnerCode: "abc"
        //}

        //Generate signature:
        //  str = partnerCode+orderId+timestamp
        //  signature = hmacsha256(str, secretKey)
        //Example signature:
        // str=abc121566448370
        // secretKey = loship - tng
        // signature=0c070eaee3277d09368af0f9188261e4bb37de7a3b29ab4bfc000a22709afc6d
        // X-Signature mac = 0c070eaee3277d09368af0f9188261e4bb37de7a3b29ab4bfc000a22709afc6d
        #region Variables and properties
        public string Partner_code { get; set; }
        public string SecretKey { get; set; }
        public string Url { get; set; }
        #endregion
        public LoziService()
        {
            //Get from data if need
            Partner_code = "abc";
            SecretKey = "loship-tng";
            Url = @"https://lungo.lozi.vn/v1/partners/tng/";
        }
        public LoziService(string partner_code, string secretKey, string url)
        {
            Partner_code = partner_code;
            SecretKey = secretKey;
            Url = url;
        }

        /// <summary>
        /// Method allow getting data using httprequest
        /// </summary>
        /// <param name="url"></param>
        /// <param name="path"></param>
        /// <param name="method"></param>
        /// <param name="data"></param>
        /// <returns></returns>
        private string GetDataUsingHttpRequestPOST(string url, string path, string method, string data, string token)
        {
            try
            {
                //Check data is not null
                if (!string.IsNullOrEmpty(data))
                    url += path;

                // create token 
                string postData = data;
                byte[] byteArray = Encoding.UTF8.GetBytes(postData);
                // getting data using httprequest
                var requester = (HttpWebRequest)WebRequest.Create(url);
                requester.Method = method;
                requester.Headers.Add("X-Signature", "mac=" + token);
                requester.ContentType = "application/json";
                requester.ContentLength = byteArray.Length;
                requester.Proxy = null;
                ServicePointManager.Expect100Continue = false;
                requester.ServicePoint.ConnectionLimit = 10;
                requester.ServicePoint.MaxIdleTime = 2000;
                Stream dataStream = requester.GetRequestStream();
                dataStream.Write(byteArray, 0, byteArray.Length);
                dataStream.Close();

                var httpResponse = (HttpWebResponse)requester.GetResponse();
                using (var streamReader = new StreamReader(httpResponse.GetResponseStream() ?? throw new InvalidOperationException()))
                {
                    var responseText = streamReader.ReadToEnd();
                    return responseText;
                }
            }
            catch (Exception ex)
            {
                return $"zxc {ex.Message}";
            }
        }

        /// <summary>
        /// Method allow getting data using httprequest
        /// </summary>
        /// <param name="url"></param>
        /// <param name="path"></param>
        /// <param name="method"></param>
        /// <param name="data"></param>
        /// <returns></returns>
        private string GetDataUsingHttpRequest(string url, string path, string method, string data, string token)
        {
            try
            {
                //Check data is not null
                if (!string.IsNullOrEmpty(data))
                    url += path + "?" + data;
                string postData = data;
                byte[] byteArray = Encoding.UTF8.GetBytes(postData);
                // getting data using httprequest
                var requester = (HttpWebRequest)WebRequest.Create(url);
                requester.Method = method;
                requester.Headers.Add("X-Signature", "mac=" + token);
                var httpResponse = (HttpWebResponse)requester.GetResponse();
                using (var streamReader = new StreamReader(httpResponse.GetResponseStream() ?? throw new InvalidOperationException()))
                {
                    var responseText = streamReader.ReadToEnd();
                    return responseText;
                }
            }
            catch (Exception ex)
            {
                return $"zxc {ex.Message}";
            }
        }

        /// <summary>
        /// Convert to HMAC256
        /// </summary>
        /// <param name="message"></param>
        /// <param name="secret"></param>
        /// <returns></returns>
        private string GetHashMach(string message, string secret)
        {
            HMACSHA256 hmac = new HMACSHA256(Encoding.UTF8.GetBytes(secret));
            hmac.Initialize();

            byte[] buffer = Encoding.UTF8.GetBytes(message);

            string signature = BitConverter.ToString(hmac.ComputeHash(buffer)).Replace("-", "").ToLower();

            return signature;
        }

        /// <summary>
        /// Create Token
        /// </summary>
        /// <param name="method"></param>
        /// <param name="path"></param>
        /// <param name="data"></param>
        /// <returns></returns>
        private string CreateToken(string str)
        {

            string signature = GetHashMach(str, SecretKey);
            return signature;
        }

        /// <summary>
        /// Get price
        /// </summary>
        /// <param name="order"></param>
        /// <returns></returns>
        public CallOrderResult EstimatePrice(EstimatePriceItem estimatePriceItem)
        {
            var result = new CallOrderResult()
            {
                message = "Call api failed"
            };
            try
            {
                var jsonSerializer = new JavaScriptSerializer();
                var data = string.Format("customer_lat={0}&customer_lng={1}&store_lat={2}&store_lng={3}", estimatePriceItem.customer_lat, estimatePriceItem.customer_lng, estimatePriceItem.store_lat, estimatePriceItem.store_lng);
                var str = string.Format("partner_code={0}&customer_lat={1}&customer_lng={2}&store_lat={3}&store_lng={4}", Partner_code, estimatePriceItem.customer_lat, estimatePriceItem.customer_lng, estimatePriceItem.store_lat, estimatePriceItem.store_lng);
                var token = CreateToken(str);
                var responseResult = GetDataUsingHttpRequest(Url, "estimate-price", "GET", data, token);

                result = jsonSerializer.Deserialize<CallOrderResult>(responseResult);
            }
            catch (Exception ex)
            {
                result.message = ex.Message;
            }
            return result;
        }

        /// <summary>
        /// Create Order
        /// </summary>
        /// <param name="order"></param>
        /// <returns></returns>
        public OrderCreateResult CreateOrderLozi(CreateOrder order)
        {
            var result = new OrderCreateResult()
            {
                message = "Call api failed"
            };
            try
            {
                var jsonSerializer = new JavaScriptSerializer();
                // Convert data to Json
                var data = JsonConvert.SerializeObject(order);
                
                var str = string.Format("{0}{1}{2}", Partner_code, order.orderId, order.timestamp);
                var token = CreateToken(str);
                order.partnerCode = Partner_code;
                var responseResult = GetDataUsingHttpRequestPOST(Url, "orders", "POST", data, token);
                result = jsonSerializer.Deserialize<OrderCreateResult>(responseResult);
            }
            catch (Exception ex)
            {
                result.message = ex.Message;
            }
            return result;
        }
        #region Classes
        public class EstimatePriceItem
        {
            public float customer_lat { get; set; }
            public float customer_lng { get; set; }
            public float store_lat { get; set; }
            public float store_lng { get; set; }
        }
        public class EstimatePriceResponse
        {
            public float shipping_fee { get; set; }
            public List<extra_fees> extra_fees { get; set; }
        }

        public class CreateOrder
        {
            public int orderId { get; set; }
            public int timestamp { get; set; }
            public string partnerCode { get; set; }
        }
        public class extra_fees
        {
            public int id { get; set; }
            public string title { get; set; }
            public string description { get; set; }
            public float value { get; set; }
        }
        public class ResponseResult
        {
            public string error_code { get; set; }
            public string description { get; set; }
        }

        public class ResponseResultCall
        {
            public string message { get; set; }
        }

        public class ResponseResultCreate
        {
            public string status { get; set; }
        }

        public class CreatingOrderResult : ResponseResult { }

        public class CancelOrderResult : ResponseResult { }

        public class TrackingOrderResult : ResponseResult { }

        public class CallOrderResult : ResponseResultCall
        {
            public EstimatePriceResponse data { get; set; }
        }
        public class OrderCreateResult : ResponseResultCall
        {
            public ResponseResultCreate data { get; set; }
        }
        #endregion
    }
}